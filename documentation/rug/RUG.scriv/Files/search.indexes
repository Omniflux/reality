<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="226">
            <Title>Acceleration_options</Title>
        </Document>
        <Document ID="28">
            <Title>Glass</Title>
            <Text>&lt;!-- \index{Material!Glass} --&gt;
Glass is a simulation of real glass and it can create near-photographic results. Glass is mainly defined by the Tint and Reflection parameters and the Index Of Refraction (IOR). Reality includes dozens of IOR presets measured from real materials. For example, if you want to render an emerald you can find the exact IOR for it, 1.56, under the Gemstones preset group. The IOR does not change the color of the material, which needs to be modified manually. Glass has three tabs: Glass, which defines the glass characteristics, and the usual Alpha Channel and Modifiers tabs.  &lt;!-- \index{Alpha channel} --&gt;

The parameters for Glass are:

- Reflection.  The color or texture of the reflections on the surface of the material. The specular color from the host's material is imported in this channel but it's usually best to change it to an off-white (250, 250, 250 for example). The higher this number is, the more reflective the glass is.  If you want to create the effects of a glass pane that has been coated with an anti-glare treatment, use a low Reflection value, like 42, 42, 42. 
- Tint. The color or texture that the glass will have and consequently the amount of light that will pass through the material. The host's diffuse color is applied to this channel. 
 If you want to create a green glass bottle this is where the green will be configured. This is the color that the light will pick up when traversing the glass. For neutral glass, like windows or car windshields, it should set it to white. For Lara Croft's sunglasses a nice shade of orange will do. If you convert the texture to use an Image Map you can achieve a plethora of stunning effects, including stained glass and light gels. If the texture washes out because of the light going through it, mix it with a dark gray color, like 20, 20, 20.
- Architectural. &lt;!-- \index{Glass!Architectural} --&gt;Glass is computationally expensive so if the object is small and at a distance, or if you don't need absolute accuracy for it, enabling this parameter will speed things up while maintaining the basic characteristics of glass like being reflective and transparent. The refraction deformation will be not visible.
- Volumetric. &lt;!--\index{Glass!Volumetric}--&gt; LuxRender 0.7 introduced volumetric glass, a material that transforms light based on its volume. What this means is that the thickness of the glass in the model affects the final result of how it's painted on the image. Also, light is affected when passing through the glass and it creates colored shadows. In Reality 2 this was called "Hyper-realistic."
- Frosted. &lt;!-- \index{Glass!Frosted} --&gt;This flag creates Frosted Glass, or rough glass. When enabled, the Roughness slider will be activated. Higher values of roughness make the glass appear more and more as if it was sand blasted.
- Thin film thickness. &lt;!-- \index{Thin film} --&gt;This value allows you to define a glass material with a film coat that is expressed in nanometers. Optical instruments, like a camera lens, are often coated with a thin film to reduce the glare caused by direct bright light like the sun. This coat can show as an iridescent "film" when seen at a certain angle. A good starting value for this parameter can be 200nm.

The images below show what a glass sphere looks like without and with thin-film coating.


# "A glass sphere without thin-film coating"

￼ "Glass sphere with thin film coating. Thickness at 200nm, IOR at 1.5"

-  Thin film IOR. This is the Index Of Refraction of the thin film. Different IORs will create different colors in the film. For this IOR you can try 1.0 and move from there to see the shift of iridescence in the coat.
When converting glass from a the host material you need to keep an eye on a couple of issues. Both [PS] and [DS] simulate glass via a transparency map or opacity value. Both these options should be avoided in Reality. If you convert a material to Glass check immediately if it has an alpha map. If so, remove it by using the Unlink option of the gear menu or the resulting material will be too  transparent to be visible. We also need check that the Opacity value is set to 1.0. 

The texture in the Tint channel of the Glass material is a crucial factor. Some textures in the host are designed to create a certain coloration in the simulated material. Unless the transmission texture has a real image, we are better off by using a solid color instead. This can be easily done by converting the Image Map texture to a Color one in the Texture Editor. If the texture has a sort of painting, like the images found on stained glass, then it will be OK to leave it in place.

- Dispersion. This flag allows you to create real glass effects like when a light is split into its basic colors by a prism. The Cauchy &lt;!-- \index{Cauchy} --&gt;coefficient can be used to control the result, together with the Clarity at depth. This option is best used with Volumetric or Standard Glass.</Text>
        </Document>
        <Document ID="259">
            <Title>Privacy notice</Title>
            <Text>The issue of privacy is very important for everybody at Prêt-à-3D. 
Reality does not require a network connection to work and it does not send any kind of personal information out.

Reality does connect, if possible, to our server to check if there are updates available. The connection does not send any personal information. The only information sent, in encrypted form, is what identifies your copy of Reality so that the server can reply if there is a version of the program that is more recent.

</Text>
        </Document>
        <Document ID="195">
            <Title>RUG_MaterialEditor6</Title>
        </Document>
        <Document ID="187">
            <Title>RUG_SunVerticalScene</Title>
        </Document>
        <Document ID="276">
            <Title>The Preset Manager</Title>
            <Text>Reality gives you the ability to disable a preset or to import and export a group of presets.

From time to time it might be necessary to try a skin or texture package in [PS]/[DS] without loading an automatic preset. Instead of deleting the preset you can simply disable it and re-enabled later on.

The Preset Manager provide full control over the installed presets. You can access the preset manager from the Reality menu. Select **Presets | Preset Manager** and a window will appear, allowing you to perform a series of tasks on the presets. See figure &lt;!--\ref{Reality-preset-manager.png}--&gt;


# "The Preset Manager"

####How to disable a preset

- Select it in the list
- Slick on the **Edit** button and uncheck the **Enabled** box 
- Click on the **Save** button

####How to delete a preset

- Select it from the list
- Click on the **Delete** button
- Confirm the deletion

####How to Export a series of presets

One or more presets can be exported into a single file called a *Shader Bundle*. A material preset is technically called a *shader* and a Reality preset can contain multiple shaders. A Reality Shader Bundle is a text file that can be easily distributed via email or any other electronic service. A bundle can be imported by a user using the Preset Manager.

- Select the presets in the list. Use Cmd-click (Mac OS) or Ctrl-click (Windows) to select multiple presets at the same time.
- Click on the **Export** button.
- Enter a file name for the bundle. Make sure to select the right folder where to save the file and take of that folder.
- Reality will ask you for a title for the bundle. Enter a descriptive text and confirm.

The bundle will be created on disk with the name that you selected and with the extension `.rsb`, which stands for Reality Shader Bundle.

####How to import a series of presets

- From the Preset Manager click on the **Import** button
- Navigate where you have a `.rsb` file
- Select the file
- The presets are added to your database and are ready to be used

</Text>
        </Document>
        <Document ID="29">
            <Title>Metal</Title>
            <Text>&lt;!-- \index{Material!Metal} --&gt;
This material defines metallic objects that can have anisotropic reflections (see the Polish parameter, below, for a definition). There are several presets: 

- Aluminum
- Chrome
- Cobalt
- Copper
- Gold
- Lead
- Mercury
- Nickel
- Platinum
- Silver
- Titanium
- Zinc

These presets can be configured to have variable levels of shininess and they can be used to create other types of metal. For example, very shiny silver can be used in place of stainless steel. We can also select *Custom metal* and use a simple color channel to create materials like anodized aluminum in seconds. Or use an image for more sophisticated effects.

The Polish value sets how shiny the metal is. Higher values bring more shine. The Horizontal and Vertical sliders are linked together by default to give uniform reflection. When the "Synchronized" option is deselected the two sliders can move independently, allowing you to create  a polish that has different values for the vertical and horizontal directions, called "anisotropic reflection." 

See the figure &lt;!--\ref{rug_metal_reference.jpg}--&gt; for an example of how the Metal material renders.

# "Metal reference card - Courtesy of  Michael Wladarsch"

&lt;!--\pagebreak[4] --&gt;</Text>
        </Document>
        <Document ID="284">
            <Title>Detailed list of new features in Reality [version]</Title>
        </Document>
        <Document ID="268">
            <Title>PoserInstaller-w64</Title>
        </Document>
        <Document ID="53">
            <Title>Modifiers_tab</Title>
        </Document>
        <Document ID="196">
            <Title>RUG_rocktexture</Title>
        </Document>
        <Document ID="80">
            <Title>Turning lights on and off</Title>
            <Text>Before hitting the **Render** button it's a good idea to double check our lights. The *Enabled* checkbox in the Light Editor can be used to turn a light on or off before rendering. All the parameters for the light are left untouched.</Text>
        </Document>
        <Document ID="285">
            <Title>Detailed list of new features in Reality [version]</Title>
            <Text>
##Full list of new features [full list of new features]##
- Up to 20 time faster CPU rendering with CPU acceleration and “Extra boost” option. While this is mainly benefitting Intel CPUs it might affect also AMD processors
- Included LuxRender with Reality, no need to install separately anymore
- Changed deliverables to use DMG on OS X and Self-Extracting zips for Windows
- Added support for GPU rendering via OpenCL
- Added automatic detection of OpenCL and of all compatible devices
- Added selection of what OpenCL devices are to be used for rendering
- Added detection of nVidia GPU card so that Reality automatically sets the OCL group size at 64
- Added multi-edit of textures. Select multiple materials, edit the Specular color, done. Works across multiple materials and with - materials of different type, as long as it makes sense
- Now it’s possible to change material types across multiple objects. Same for applying universal presets.
- Direct editing of Color and Image Map texture. Alt/Opt-Click to open the texture in the texture editor
- Added IBL single lights, a set of 200 lights in different shapes (rings, lines, circles etc) in different pre-assigned positions. Great for creating all kind of creative lighting in minutes. Courtesy of Lee Furssedonn
- Added Car Paint category for Universal Preset
- Added Car paint presets
- Added Pearl preset, courtesy of Russ Sprouse
- Added support for custom Coat for Skin material
- Added conversion of iRay shaders
- Disabling/Enabling SSS is now all that you need to do. The associated volume is automatically deselected/selected
- Added support for having Normal maps and Bump maps at the same time
- Added conversion of Studio mats that have NM+BM
- Vastly accelerated the rendering of material preview for Universal Presets
- Added support for Studio’s DzShaderLights (pseudo spot, point and distant)
- IBL maps are now collected when texture collection is turned on
- IES files are now collected when texture collection is turned on
- Added support for Studio’s File | Merge feature
- Added conversion from Mix to Math textures
- Increased precision of the Math texture’s amounts to 4 decimals
- Added menu option to retrieve the license
- Added option to save a watermark to tag images made with Reality
- Changed “Alpha Channel” tab to be “Opacity”
- Added G3F presets to ACSEL
- Windows-specific. Now Reality’s window goes in the foreground when calling Reality from Studio while Reality is already running.
- Added Reality.setIntensity([light ID], [new intensity]) API call to set the gain/intensity of a light. Useful to adjust the start gain of IBL sets
- Added gradient preview for the band texture
- Added support for negative offsets for image maps
- Updated icon on OS X, including retina display version
- Changed gain for LEMs to use 6 decimals for very small gain
- General speed improvement by optimizing the use of instances only when needed
- Added support for Sobol sampler
- Extended image write interval to 10 times what the previous maximum
- When setting the name of a scene with an extension different than .lxs Reality changes it automatically to .lxs
- Removed support for old hybrid rendering, which is not useful anymore

##Bug fixes

- Fixed parenting/unparenting issues with Poser.
- Fixed most of Reality crashes when starting a new scene in the host, or when closing the host
- Fixed visibility sync bug in Poser
- Fixed several ACSEL bug, related to deleting presets or showing the presets right after being created.
- Fixed bug for DAZ Studio that generated duplicated objets when a piece of clothing for a figure is fitted to an incompatible figure. For example when adapting V4 clothing to G2F.
- Fixed lack of sync for selected camera with Poser
- Fixed bug that crashed Reality when loading a new scene or when merging a scene in DAZ Studio
- Fixed adding transparency map
- Fixed all the issues about merging lights in DS (I hope).
- Fixed I18N bug that caused names with accented characters to trigger an “invalid license” error
- Fixed use of alpha map + disp.map for Metal material
- Fixed bug in Studio Edition that caused newly-created materials to not render
- Fixed retention of image map when converting a material to light
- Fixed renaming of Cameras in Reality Poser Edition
- Fixed crash when right-clicking on an empty texture preview
- Fixed use of Bump Map with Cloth
- Fixed bug that prevented tiling and offset data in the Glossiness texture to be passed to the render
- Fixed bug that prevented the offset and tiling to be preserved when converting image map textures
- Fixed plexiglass U.P. so that it does not report the need for Dawn textures
- Fixed bug that cause image maps with /NO_MAP as file name when converting invalid Poser nodes
- Fixed bug that caused the ColorMath texture to report being changed when it was just opened in the texture editor
- Fixed M4 Genitalia emitting light</Text>
        </Document>
        <Document ID="188">
            <Title>The material editor</Title>
            <Text>The heart of Reality is its material editor. With it you can modify the type and definition of all materials recognized by Reality. This can be used to optimize the desired result or to create new materials from scratch.

The Reality material editor has been designed to be flexible, powerful and easy to use. It provides the same power that you can have from a node-based editor, but without the complexity of using nodes.

##Material types

Every material in Reality has a specific type. The types available are:

- Skin &lt;!-- \index{Material!Skin} --&gt;
- Glossy &lt;!-- \index{Material!Glossy} --&gt;
- Matte &lt;!-- \index{Material!Matte} --&gt;
- Glass &lt;!-- \index{Material!Glass} --&gt;
- Metal &lt;!-- \index{Material!Metal} --&gt;
- Velvet &lt;!-- \index{Material!Velvet} --&gt;
- Cloth &lt;!-- \index{Material!Cloth} --&gt;
- Null &lt;!-- \index{Material!Null} --&gt;
- Mirror &lt;!-- \index{Material!Mirror} --&gt;
- Water &lt;!-- \index{Material!Water} --&gt;

Right at this point we can see already how Reality makes things easier from the start. When materials are of a given type there is no confusion about what to expect. A Metal material cannot have settings related to skin. A glass material will not have parameters that belong to metal or velvet. 

Materials with types make it much easier to work and find the relevant parameters.

###Channels
Each material is defined by channels and properties. A channel is where we attach textures. For example, the Glossy material has a Diffuse channel which defines the surface of the material. If we attach an image map to that channel then the surface of that material will show that image.

# "The Material Editor"

In figure &lt;!--\ref{realitymateditor.png}--&gt; we can see the Diffuse, Specular, Top Coat, and Translucency channels. Each channel has, in this example, a texture of type Color. The groups of three numbers are the RGB values for the color selected in each texture.

￼ "Detail of the material editor"

###Textures
In the [PS] and [DS] world the word "texture" is frequently used as a synonym for "image" but that is an oversimplification. In the 3D world a texture is any pattern that is applied to a surface. A solid color is a texture for which all pixels have the same value. In Reality we have fourteen types of textures. One of them is the Image Map, which paints an image file onto the selected surface.

We can edit the value of the texture or we can change the type of the texture altogether. For example, if we want to have an image for the diffuse channel, instead of a solid color, here is the simple procedure to do that:

Alt/Opt-Click on the color swatch in the Diffuse channel. The Texture Editor will show in the right side of the window, see figure &lt;!--\ref{reality-texture_editor1.png}--&gt;. We can also click on the gear menu for the Diffuse textures and select **Edit** from it.

￼ "The Texture Editor"

From the drop-down list labelled "Texture type" select **Image Map**. See figure &lt;!--\ref{reality_texture-selector.png}--&gt;

￼ "Changing the type of texture"

The texture has been changed from Color to Image Map. Now we can select an image of our liking. Let's click on the gear menu to show a menu that gives us the choice to **Select a new file**. Figure &lt;!--\ref{reality-gearmenu-image.png}--&gt; shows what happens.

￼ "The Gear menu"

Navigate to an image file of your choice and confirm the selection. Once you do that you will see the file in the preview field, below the name. You can also see the dimension, in pixels, of the file just below its preview. See figure &lt;!--\ref{te-grainy-rock.png}--&gt;.

￼ "Image map loaded"

If we run a render now we will see the the object attached to that material, in this case the standard host's sphere primitive, renders with a rocky surface. It's not very credible but this is just to show the workflow in modifying materials. See figure &lt;!--\ref{rug_rocktexture.png}--&gt;.

￼ "Rock texture applied to the sphere"

###A nodeless system
It is common for 3D programs to represents materials using "nodes," entities that represent a certain function and that can be connected together. Nodes are very powerful but they are also very hard to use. Reality doesn't use nodes but it has a system of creating textures that is as powerful. 

In Reality, to change how a texture works, you don't disconnect/reconnect nodes, you simply convert from one texture type to another and Reality will carry over the relevant information.

##Reality materials are independent

One of the great advantages of Reality is that it creates its own copies of materials distinct from the host's versions. In this way you can change types of material, and you can completely change the properties of that material, without having to worry how that will affect your base materials in the host. This level of freedom, coupled with the simpler material editor, is very conducive to creativity and experimentation.

For example, let's say that you see some buttons on a garment and you are wondering if those would look good if they were turned to glass. You can convert the material to Reality's Glass and do a quick render. If the result is not satisfactory then you can simply right-click on the material and select **Revert to original**. Like it never happened!

</Text>
        </Document>
        <Document ID="277">
            <Title>"Alice Powell" &lt;aliwonder@cox.net&gt;</Title>
            <Text>"Alice Powell" &lt;aliwonder@cox.net&gt;,
"Beatrice McKeown" &lt;mckeownb@optusnet.com.au&gt;,
"Cecile Decour" &lt;cakeone@cakeone.com&gt;,
"David Harrison" &lt;harrisondavid777@gmail.com&gt;,
"Eliot Gutierrez" &lt;evileliot@hotmail.com&gt;,
"Ilona Laura Strifler" &lt;IlonaLauraBoyer@gmail.com&gt;,
"Janet Coulter" &lt;ccbn213@gmail.com&gt;,
"Emily Smirle" &lt;emily.smirle@gmail.com&gt;,
"Marissa Jenkins" &lt;fictionalbookshelf@renderosity.com&gt;,
"Rafeeqah U. Llena" &lt;shiftingimages.products@hotmail.com&gt;,
"Scott Brownell" &lt;scottbrownell@rogers.com&gt;,
"Steve Aylwin" &lt;steveaylwin@live.com&gt;
</Text>
        </Document>
        <Document ID="54">
            <Title>NormalMaps</Title>
        </Document>
        <Document ID="81">
            <Title>Render options</Title>
            <Text>The Render tab has all the options to control the final result of the render. The page shown in this tab is organized by group. We select a group by clicking on a name in the left column list. 
The groups available are:

- Output. This group handles everything related to the generation of the image and the files that are provided to LuxRender. The rendering happens by exporting the geometry, materials, and lights from the host to LuxRender. The export is done by writing a few files in the LuxRender format and then calling LuxRender to process them. The result is an image file.
- Scene configuration. During rendering LuxRender calculates the paths of light from the source to the camera. There are several algorithms that can be used for that calculation. The *Scene configuration* group allows us to select the right algorithm. This is a rather advanced topic which is best addressed by people who are quite familiar with LuxRender or who need to use GPU acceleration. Otherwise it can be ignored by most Reality users.
- Renderer. This group contains the options to link Reality to LuxRender and to change how the renderer runs.
- Texture collection. Reality can collect texture in a single location so that a scene can be moved to a different machine without requiring the installation of the the host's runtimes again.</Text>
        </Document>
        <Document ID="269">
            <Title>PythonShell</Title>
        </Document>
        <Document ID="55">
            <Title>OutputTab</Title>
        </Document>
        <Document ID="197">
            <Title>Material sections</Title>
            <Text>The Reality material editor groups properties of a material in a logical way to help you work faster and with ease. These groups are handled by four tabs:

- The Material tab handles all the main properties of a material.
- The Opacity tab handles the data that defines the opacity of the materials, also known as Alpha Channel. &lt;!-- \index{Alpha channel} --&gt;
- The Volumes tab is enabled for materials that can handle volumes. They are: Skin,&lt;!-- \index{Material!Skin} --&gt; translucent Glossy ,&lt;!-- \index{Material!Glossy} --&gt; Null,&lt;!-- \index{Material!Null} --&gt; and Water.&lt;!-- \index{Material!Water} --&gt; In that tab we can define the inner and outer volume for the material. See the section on [Volumes][] for more information.
- The Modifiers tab handles the use of Bump maps, Normals maps and Displacement maps. It also manages the definition of subdivision, which is strictly connected with displacement. &lt;!-- \index{Subdivision}\index{Bump map}\index{Displacement map} \index{Normal map}--&gt;</Text>
        </Document>
        <Document ID="286">
            <Title>Rendering modes</Title>
            <Text>Reality provides several options for rendering your images with optimal balance between quality and speed. Let's see all the options in detail.

# "Scene Configuration Options"

By default Reality renders using CPU acceleration. This mode gives you an excellent quality of image, while rendering as fast as possible when using the CPU and preserving the unbiased nature of the image. Compared to the previous version of Reality, this accelerated mode is between seven and ten times faster.

We can make the CPU rendering even faster by enabling the **Extra Boost** option. As the name implies, this option can deliver an image in even a shorter time. The trade-off is that Extra Boost can introduce bias. Nevertheless, this is an excellent option when in a hurry or when rendering animations. Compared to the previous version of Reality, CPU acceleration with **Extra Boost** can be up to twenty times faster.

##OpenCL rendering

If your computer has an OpenCL device then the **OpenCL rendering** option will be enabled. Reality automatically detects all the OpenCL devices in your computer and it lists them in the **Scene Configuration** page. When you enable the OpenCL rendering option you have the possibility to enable or disable any of the devices detected. For example, you can decide to render using both the CPU and the GPU, or exclude the CPU from the rendering process and use the GPU alone.

￼ "OpenCL Rendering options"

As with the CPU acceleration, the OpenCL rendering has an **Extra Boost** variant. The same considerations outlined for the CPU version are valid in this case; enabling the Extra Boost option can introduce bias in your final image.

Please note that when enabling Extra Boost for OpenCL,  Reality automatically excludes the CPU from participating in the rendering. This is because Extra Boost for OpenCL devices is valid only for GPUs.

GPU-based rendering also suffers from limited RAM. GPUs generally have small amounts of on-board RAM, typically in the range of 2GB. On the other hand computers nowadays can have in excess of 20 or 30 GB and the CPU is able to address all that memory. For complex scenes having that amount of memory is a crucial factor.

To help contain a scene inside the GPU's RAM, Reality automatically enables texture collection and scaling when selecting to render with OpenCL.

##Starting up
If you want to try OpenCL rendering we suggest that you start without the Extra Boost option. Gain some experience in using this mode and then experiment with the Extra Boost option.

##Shader compilation
Whenever you use OpenCL, the materials, a.k.a. shaders, need to be compiled before the rendering can begin. During this time LuxRender will show a black rectangle in the area where the image is expected to show.

While LuxRender is compiling the shaders it will report that there are zero devices present. The information is shown in the status bar:

￼ "LuxRender compiling the shaders"

Once the compilation is done the number of devices will be displayed. For example, if you enabled one GPU then LuxRender will report 1 device. If you enabled both the GPU and CPU then LuxRender will report two devices. 

Depending on  the type of hardware and the device driver installed, the compilation time could vary from a few seconds to several minutes. This compilation phase is necessary only the first time a given material is rendered. If you do successive renders, without changing any of the materials, then the rendering will start almost immediately.

It has been noticed that OpenCL with Extra Boost might take longer to compile on some nVidia hardware. We are aware of this and hope to provide a solution soon.

It is worth noting that in the case of an animation the compilation time will be needed only for the first frame, while all the other frames would be a rendered right away.

Once all the materials are compiled you will find that changing camera view, changing poses and doing any other operation in the scene that does not involve changing materials will not affect the render startup time.

##OpenCL technical information

&lt;!-- \index{OpenCL} --&gt; &lt;!-- \index{OpenGL} --&gt;
Please note that OpenCL is not related to OpenGL. Please also note that OpenCL is not CUDA. OpenCL is an open standard that provides computer programmers with an interface to use the computing power available in the GPU. OpenCL is platform-independent and so it works, and it's supported by, graphic cards from different brands, including nVidia, AMD and Intel. CUDA is a proprietary API, similar in scope to OpenCL, but only supported by nVidia.

With OpenCL you can have multiple devices, GPUs, your machine and those devices can come from different vendors, and Reality and LuxRender will be able to use them at the same time.

####Important notes for OS X users
While Reality provides full support for OpenCL on both OS X and Windows, unfortunately the OpenCL drivers for OS X 10.10 and 10.11, up to September 2015, are broken. This means that it's not possible to render using OpenCL on OS X.

If and when Apple will fix its OpenCL drivers, then Reality will automatically be able to render your images with OpenCL.</Text>
        </Document>
        <Document ID="56">
            <Title>Reality_Lights</Title>
        </Document>
        <Document ID="189">
            <Title>RUG_MaterialEditor</Title>
        </Document>
        <Document ID="278">
            <Title>Rendering workflow-1</Title>
        </Document>
        <Document ID="57">
            <Title>Reality2.0UI_01</Title>
        </Document>
        <Document ID="272">
            <Title>Untitled</Title>
        </Document>
        <Document ID="83">
            <Title>Reality's materials</Title>
        </Document>
        <Document ID="58">
            <Title>RenderingParameters_01</Title>
        </Document>
        <Document ID="198">
            <Title>The Light Editor</Title>
            <Text>If we click on the Lights tab at the top of the Reality UI we enter the Light Editor. 

# "The Reality Light Editor"

Lights in LuxRender have properties that cannot be found in  [PS] or [DS] and so this is the place where you can define all the properties of lights used in your scene. Most Reality lights are directly linked to their  host equivalent. You cannot create or delete a light in Reality, you do that, as usual, in the host so that they can be place and adjusted as they need to be.

In the Light Editor you can enable or disable lights independently from  how they are set in the host.
</Text>
        </Document>
        <Document ID="287">
            <Title>Rendering with a transparent background</Title>
            <Text>If you want to replace the background of the image in post-processing you can do that easily in Reality by simply enabling the **Transparent BG** checkbox in the Output section of the Render tab.</Text>
        </Document>
        <Document ID="282">
            <Title>2U_balance</Title>
            <Text>200,000 / 3 = 66,666
175,000 / 3 = 58,333

200,000 / 4 = 50,000
175,000 / 4 = 43,750

Matte box + filters = 2,600
Harley = 560

Lecsos = 1/2 the cost
</Text>
        </Document>
        <Document ID="59">
            <Title>RenderingParameters_02</Title>
        </Document>
        <Document ID="279">
            <Title>Untitled</Title>
        </Document>
        <Document ID="156">
            <Title>linear_tm_f8_iso50</Title>
        </Document>
        <Document ID="160">
            <Title>Quick-start for [PS] artists</Title>
            <Text>When using a new program we are always eager to see what it can do, without spending time reading long documentation. 
If you want to start rendering great scene with almost no setup, then download the "Perfect Shot Scene" from our website ( http://preta3d.com/pre-made-scenes/ ) and use it as the start of any new scene. It contains a very flattering and realistic light setup, background and floor, and the camera exposure is set to work right out of the box. Just add your character and click on **Render**.

Here is a video that shows how to get started with Reality. It uses Reality 3 but the workflow is the same:

[#](http://www.youtube.com/watch?v=nKexUCXY53M)

You can follow this workflow to create your first scene with Reality:

- From the Poser Library click on the Scene tab, go to the Reality folder and load the file titled **Reality Start Scene** if you use Poser 11. If you use Poser 9 or Poser 10 then load the file **Reality Start Scene - P9-P10**. Make use that you use the option to replace the existing scene and not the one that imports or merges the scenes together.
- The Reality start scene includes two mesh lights and it has the camera exposure configured for the Main and Face cameras. 
- Add a character or prop of your choice to the scene.
- From the [PS] menu select **Render | Reality Render Editor** The Reality program will be launched. Reality is a stand-alone program which communicates with [PS]. You can leave Reality running and switch back to [PS] to continue editing your scene. At any time you can switch back to Reality using the OS task switcher or by clicking on the Render menu option again. If Reality is already running the menu action will bring the program to the foreground.
- **Make sure that you don't use OpenCL acceleration**, start with the default of CPU-Accelerated.
- **Important:** do not enter any value in the **Max Samples** field. That is only for animation purpose. Leave it at zero.
- Click on the Render tab and click on the **Render Frame** button.
- Watch as your scene is rendered by LuxRender. **LuxRender does not stop automatically;** it continuously refines the image until you decide to stop it. When you decide that the quality of the image is satisfactory you simply close LuxRender. The image will be saved in the location specified in the Output options, in the Render tab. By default the image is rendered to a file called `reality_scene.png` which is saved in your Documents folder.

￼ "Reality Start Scene for Poser"

### How to optimize your Poser 11 scenes
Poser 11 includes a new type of light, the Area Light. While on the surface the Area Light might be similar to the Reality Meshlight, it is not as flexible and powerful. To obtain the best results from your scene we suggest to delete all the lights in the Poser scene. Then add one Infinite Light and disable it in the Lights tab of Reality. The purpose of this light is to let us see what's in the scene, we don't want to use it in the render.

Once the initial setup is done, start adding one or more Reality Meshlights. Size them to affect the softness or harshness of the light, and optionally use the snoot to control the light spill.

The Reality mesh light will give you better results, faster renders, and more control than the Poser Area light.

### About the [PS] Perspective dial
&lt;!-- \index{Camera!perspective} --&gt;
[PS] cameras have a slider that can artificially change the perspective of the frame. Perspective, in the physical world, is determined by the focal length of the lens and the position of the camera in the scene. That's how it works with real cameras. 

Reality and LuxRender are designed to respect the physical measurements and will match your Poser camera to the pixel **as long as the Perspective slider is not changed.** The Perspective slider should be avoided at all costs. If you need to change the perspective of your scene you need to use the focal length value and move the camera around. 

The same considerations are valid for the **Scale** slider in [PS] when it affects cameras. It's necessary to avoid changing its default value or the rendered image will nor match what is framed in [PS].

Now that you have done your first render you can explore all the other great features offered by Reality.

</Text>
        </Document>
        <Document ID="239">
            <Title>Light_Efficiency</Title>
        </Document>
        <Document ID="180">
            <Title>Lighting practices</Title>
        </Document>
        <Document ID="199">
            <Title>The Camera Editor</Title>
            <Text>The Camera Editor is where you select which camera you want to use for the rendering and how that camera should behave. &lt;!-- \index{Camera} --&gt;

# "The Reality Camera Editor"

The Camera Editor takes the list of cameras defined in the host and presents them in a list. By default the active camera in the host is selected in the Camera Editor. As you switch camera view in the host the Reality Camera Editor changes its selection. 

You can change this behavior by explicitly clicking on one camera name. In that way Reality will recognize that you want to render through the selected camera regardless of which camera is active in [PS] or [DS].

An asterisk after the focal length column marks the camera that is currently active in the host.

The exposure &lt;!-- \index{Exposure} --&gt;control panel can be used to set the desired exposure for each camera. If the exposure is not set explicitly then Reality will select the Autolinear &lt;!-- \index{Tonemapper!Autolinear} --&gt; tonemapper in LuxRender, which automatically exposes the picture. Otherwise Reality will set the Linear tonemapper with the parameters that you set. This allows you to control the exposure with precision.

###For animators
Setting a consistent exposure for all frames of an animation is fundamental, otherwise you can end up with annoying flickering caused by the automatic adjustment of the exposure done on each frame. If you set the exposure in the Camera Editor then all frames generated via Reality will have the same exposure.</Text>
        </Document>
        <Document ID="288">
            <Title>Distribute scene files with Reality settings</Title>
            <Text>Starting with Reality 4.2 it is possible to save a Poser or DAZ Studio scene for distribution to other artists. 

The issue with distributing a scene file is that Reality data is saved in them and some of that data is specific to a user's installation. For example, the paths where to save the image file generated and the LuxRender scene file are specific to a given installation.

Starting with Reality 4.2 you can edit those scene files and remove the path for the image file and scene file. When Reality will load the scene file it will automatically check if the files referenced use valid names and if not, it will reset the paths to the default locations according to the running installation.

So, if you blank the image file name and the scene file name, and give the scene file to another user then the scene will be updated by Reality during the loading and the paths to those files will be set to valid defaults.

To blank those file locations you will need to edit the Poser or DAZ Studio scene with a suitable text editor. The Reality file names cannot be blanked inside Reality.
</Text>
        </Document>
        <Document ID="155">
            <Title>linear_tm_f2_8_iso50</Title>
        </Document>
        <Document ID="266">
            <Title>UI</Title>
        </Document>
        <Document ID="86">
            <Title>Rendering animations</Title>
            <Text>Reality has support for animation rendering. Animations are rendered as sequences of frames, each frame saved to an individual file. To create a video animation file you then need to assemble the frames using an NLE (Non Linear Editor) like Adobe Premiere, Apple Final Cut, or compositing programs like Adobe After Effects. Blender's video editor can also be used, which provides you with a zero-cost solution for video editing.

###Frame Numbering###
If you want to automatically create a file name that includes a number corresponding to the frame, simply add a certain number of "#" characters at the end of the image file name. For example, if you change the image file name from the default to *reality_scene_##.png* and you render frame 42 of your animation, Reality will export the scene to a file named *reality_scene_42.png*. If you use more # signs the file name will be padded with zeros if necessary. For example, if the pattern used is *reality_scene_####.png* the generated image file will be named *reality_scene_0042.png*.

Once you're done setting your animation range all you need to do is to click on the "Render Animation" button. Reality will export each scene file and then call LuxRender, adding the full animation set to the Render Queue. You will be able to see the full set of scene files passed by clicking on the "Queue" tab in LuxRender.

###Rendering a frame subset###
You don't have to render the whole animation as defined in [DS] or [PS]. If you click on the **Animation** button in the Render tab you will be able to specify a range of frames to be renderer. If you leave the start and end frame values at 0, the whole animation will be rendered. Otherwise you can specify a subset of frames, for example start frame 15 and end frame 95, and Reality will render only those frames. Please note that the range works in compatibility with the hosting application. With [DS] the first frame is numbered 0, and with [PS] it's numbered 1.
</Text>
        </Document>
        <Document ID="281">
            <Title>Generic presets</Title>
        </Document>
        <Document ID="194">
            <Title>RUG_MaterialEditor5</Title>
        </Document>
        <Document ID="157">
            <Title>linear_tm_f8_iso80</Title>
        </Document>
        <Document ID="238">
            <Title>Linear_Tonemapper</Title>
        </Document>
        <Document ID="186">
            <Title>RUG_SunHorizontalScene</Title>
        </Document>
        <Document ID="244">
            <Title>Textures</Title>
            <Text>&lt;!-- \index{Textures} --&gt;
A texture is a pattern that is projected on a surface. At the very simplest the "pattern" can be a solid color. 

Traditionally, in the [PS] and [DS] world the term texture has been equated to an image. That is actually not correct. This book uses the term "texture" to indicate a generic pattern projected on a surface. We will use the expression "image map" to indicate a texture based on an image. 

Textures are divided into a few different subcategories. There are, for example, procedural textures, which are patterns generated by the software based on some input parameters. Procedural textures are very powerful and flexible. For example, the Bricks texture generates brick patterns that can be adjusted by the artist.
 
Some textures generate RGB values that are suitable for input for the Diffuse channel. Other textures generate numeric data, values between 0.0 and 1.0, for each "pixel." Numeric textures are useful to drive things like displacement and transparency. Although some programs, like [PS], allow us to mix color and numeric textures together, LuxRender doesn't allow it. This is the reason why some textures are not accessible for certain channels.

Reality provides access to a few different types of textures. They are:

- Color. A color texture paints the surface with a solid color chosen by the user. See figure &lt;!--\ref{rug_tex_color.png}--&gt;.
- Image map. This texture uses an image to paint the surface. See figure &lt;!--\ref{rug_tex-image-map.png}--&gt;.
- Texture Combine. This image mixes two textures together. The mixing can be selected to be one of:
	- Add. The RGB values from texture 1 are added to the RGB values of texture 2.
	- Subtract. The RGB values from texture 1 are subtracted from the RGB values of texture 2.
	- Multiply. The RGB values from texture 1 are multiplied with the RGB values of texture 2. This is the most common use.
	- None. This "function" allows us to use the Texture Combine texture without an input for the second texture. This situation is useful when we want to mix a color with a texture because each input in the Texture Combine texture includes a texture and a color that is multiplied. By using None we simply multiply a color with the texture in the first slot.
- Math. This operation is reserved for numeric textures. It's similar to Texture Combine but it acts on floating point values instead
- Band. This is a gradient texture based on four color points. See figure &lt;!--\ref{rug-tex-band.png}--&gt;
- Bricks. This procedural texture generates a brick pattern based on several parameters. See figure &lt;!--\ref{rug_tex-bricks.png}--&gt;
- Checkers. This procedural texture generates a checker pattern based on several parameters. See figure &lt;!--\ref{rug_tex-checkers.png}--&gt;
- Clouds. This texture generates semi-random noise that takes the shape of clouds. If scaled down it can be used for bump mapping and other applications where random noise is useful. This is a numeric texture. See figure &lt;!--\ref{rug_tex-clouds.png}--&gt;
- Fractal noise. This texture generates great pseudo-random noise that is excellent for bump mapping. This is a numeric texture. See figure &lt;!--\ref{rug_tex-fractal-noise.png}--&gt;
- Marble. Another numeric texture. This one generates patterns that resemble types of marble, depending on the parameters entered. See figure &lt;!--\ref{rug_tex-marble.png}--&gt;
- Mix. This texture allows us to mix two textures together. Each input texture can be a Mix texture itself, allowing endless nesting of the mix. 
- Distorted noise. This texture generates a noise pattern and then it distorts it using another noise pattern. It's a great tool for creating interesting patterns. This is a numeric texture. See figure &lt;!--\ref{rug_tex-distorted-noise.png}--&gt;
- Wood. This texture generates patterns that resemble the grain of wood. This is a numeric texture. See figure &lt;!--\ref{rug_tex-wood.png}--&gt;


# "Color texture"

&lt;!-- \index{Textures!color} --&gt;
￼ "Image Map texture"

&lt;!-- \index{Textures!image map} --&gt;
￼ "Band texture"

&lt;!-- \index{Textures!band} --&gt;
￼ "Bricks texture"

&lt;!-- \index{Textures!bricks} --&gt;
￼ "Checkers texture"

&lt;!-- \index{Textures!checkers} --&gt;
￼ "Clouds texture"

&lt;!-- \index{Textures!clouds} --&gt;
￼ "Fractal noise texture"

&lt;!-- \index{Textures!fractal noise} --&gt;
￼ "Marble texture"

&lt;!-- \index{Textures!marble} --&gt;
￼ "Distorted noise texture"

&lt;!-- \index{Textures!distorted noise} --&gt;
￼ "Wood texture"

&lt;!-- \index{Textures!wood} --&gt;
</Text>
        </Document>
        <Document ID="164">
            <Title>The Reality User Interface</Title>
        </Document>
        <Document ID="265">
            <Title>materialEditor</Title>
        </Document>
        <Document ID="267">
            <Title>PoserInstaller</Title>
        </Document>
        <Document ID="30">
            <Title>Mirror</Title>
            <Text>&lt;!-- \index{Material!Mirror} --&gt;
This material simply defines a mirror surface. The parameters include a color for the reflectivity. The brighter the color, the brighter the mirror. For example, if you define the reflectivity to be 50, 50, 50 (a dark shade of gray), the mirror will act as if the glass was tinted dark. Generally shades of gray work best for this parameter. The other parameters define the optional thin film (zero thickness will disable it), and the IOR for the film. These work exactly like their Glass counterparts.</Text>
        </Document>
        <Document ID="31">
            <Title>Null</Title>
            <Text>&lt;!-- \index{Material!Null} --&gt;
Null is perfect for when you need to create special effects using the Volumes. A Null material keeps all the geometry information, polygons and so on, but the geometry is not rendered. This makes it ideal for creating a "fog box," where the internal volume creates the fog effect and the geometry itself is not visible. Since it's necessary to have a mesh to hold the volume then Null material is our choice when using Volumes. See [Volumes][] for more information.</Text>
        </Document>
        <Document ID="35">
            <Title>Velvet</Title>
            <Text>&lt;!-- \index{Material!Velvet} --&gt;
This is a great material  for clothes and other textile objects like drapes. In addition to the usual diffuse color and texture, similar to Matte, velvet includes a "Thickness" parameter. Higher values accentuate the velvet effect.</Text>
        </Document>
        <Document ID="60">
            <Title>RenderingParameters_03</Title>
        </Document>
        <Document ID="36">
            <Title>Water</Title>
            <Text>&lt;!-- \index{Material!Water} --&gt;
This material is one of the most exciting features of Reality. Water allows you to create very realistic-looking water like you see in high-end 3D programs.  The parameters for water definition are:

- **Tint.** The color for the water. Use it to create orange juice, wine, beer or any other liquid. Please render responsibly.
- **Ripple amount.** If this number is higher than 0 then Reality will create ripples in the final render of the material. Higher values for this parameter create bigger, deeper ripples.
- **Ripple type.** There are six different types of ripples that can be selected. Each type provides a unique pattern for the water rippling. We can see a sample of the pattern next to its name.
- **IOR.** Liquids, like glass, refract the light. The default Index Of Refraction for the Water material is 1.3 but we can change it to anything that we want with this parameter.
- **Clarity at depth.** The measure of how far you can see into the water. Expressed in meters.

The easiest way to add water to your scene is to use the Water Plane or the Round Water Plane props provided with Reality. Just add one of those props in your scene, scale it to fit and render. Alternatively we can also import any OBJ into the host and convert it to water. If the OBJ already has a single material called **RealityWater** then Reality will do the assignment of the water material automatically. 

Water has also an alpha channel to help define irregular shapes for the water prop by using a transparency map. Please note that the same issues for alpha maps explained in the Glass material apply here.  &lt;!-- \index{Alpha channel} --&gt;</Text>
        </Document>
        <Document ID="61">
            <Title>SLG_Monitor</Title>
        </Document>
        <Document ID="63">
            <Title>Sun_Controls</Title>
        </Document>
        <Document ID="64">
            <Title>SwitchMaterial</Title>
        </Document>
        <Document ID="90">
            <Title>Best practices for exporting your scene</Title>
            <Text>###Hide what you don't see

LuxRender performs very demanding operations because it uses real-world mathematical models for calculating the effects of light and the behavior of materials. While often it's a good idea to render off-camera objects, many times you will save a considerable amount of time and memory by not exporting part of your scene that is not visible. 

For example, many scenes that use the DAZ human figures, like Victoria or Michael, pose the models with their mouths closed. In that situation hiding the teeth, tongue and gums saves you hundreds of polygons during the export, polygons that will not be rendered but that will require memory for the geometry, the materials, the UV maps, etc. Save yourself some render time by hiding them before rendering. 

###Keep it simple

After you use Reality and LuxRender for a while you will get a sense of how things work and what to expect. Until you get there, keep your scene simple. Load a simple scene, a few props, and a human figure. Add just one mesh light. Render the scene at a low resolution, something around 800x450. This will likely give you a very quick result and a way of checking that your system works with Reality and LuxRender. From there increase the complexity gradually. In a short amount of time you will develop the skills to recognize the different scenarios and how to optimize Reality for them.
</Text>
        </Document>
        <Document ID="65">
            <Title>TextureProperties</Title>
        </Document>
        <Document ID="91">
            <Title>Saving your Reality settings </Title>
            <Text>Reality saves all your material configurations and other settings inside your [PS] or [DS] scene automatically. Once you save the scene file your Reality configuration is saved. When you reload that scene in [PS] or [DS] all the Reality settings will be loaded automatically.</Text>
        </Document>
        <Document ID="66">
            <Title>WestPark_metal</Title>
        </Document>
        <Document ID="92">
            <Title>Stopping and resuming renders</Title>
            <Synopsis>Stopping and resuming renders

You can stop a Reality-created render at any time, and close Lux. 
</Synopsis>
            <Text>LuxRender allows you to stop and resume your renders at any time. This is an optional feature which is disabled by default in LuxRender but Reality enables it for all scenes that it generates. The feature is based on the creation of a "film" file, a file that keeps track of the status of LuxRender at any point in the process. The file has the same name of your image file but with the extension ".flm". &lt;!-- \index{flm files} --&gt;
You can stop a Reality-created render at any time, and close LuxRender. 

To restart the render from where it stopped:

- Launch LuxRender directly, outside Reality.
- Select the *File | Open* menu option. 
- Select the `.lxs` file generated from your scene
- In a few seconds you will see the render resume from where it was stopped and continue the refining process.
</Text>
        </Document>
        <Document ID="67">
            <Title>WestParkSLG</Title>
        </Document>
        <Document ID="68">
            <Title>Glass_no_tfc</Title>
        </Document>
        <Document ID="69">
            <Title>Glass_tfc</Title>
        </Document>
        <Document ID="94">
            <Title>Updating LuxRender</Title>
            <Synopsis>Describe the procedure of updating Lux between Reality revisions</Synopsis>
            <Text>You can find the latest versions of LuxRender at the [our support page for LuxRender](http://preta3d.com/download-luxrender/).
</Text>
        </Document>
        <Document ID="6">
            <Title>Reality plug-in software license</Title>
            <Text>END-USER SOFTWARE LICENSE AGREEMENT

The Pret-a-3D Software delivered is intended for individual personal use only. Redistribution is not allowed.
1. GRANT OF LICENSE:
    Copy and Use - Application Software. Pret-a3D grants to Recipient a limited, non-exclusive License to install, use, access, display, run, or otherwise interact with ("RUN") this copy of Reality plug-in (hereinafter the "SOFTWARE PRODUCT"), or any prior version, on a single computer, workstation, terminal, handheld PC, or other digital electronic device ("COMPUTER"). The primary user of the COMPUTER on which the SOFTWARE PRODUCT is installed may make copies for his or her exclusive use on other computers.
    Pret-a-3D retain all ownership and title to the Software at all times.
    Support and Updates. This License does not grant Recipient any right to technical or Software product support of any kind, bug fixes, or any enhancement or update, by Pret-a-3D. 
    This License applies to any updates or extensions of time-protected-software which may be supplied to Recipient by Pret-a-3D or any of its distributors.  
    Redistribution and Content Use. This License prohibits the Recipient from redistributing of any part of the Software Product, including images, models, applets, documents, icons and programs, both for commercial or non-commercial purposes.
    This License grants to the Recipient the right to use images and models created through using the Software Product for either commercial or non-commercial purposes. At no time may the Recipient redistribute images or 3D models that are delivered with the Software Product. The Recipient may not re-license or re-distribute the images, models or clip art that are delivered with the Software Product without first receiving written permission from Pret-a-3D.  For the purposes of this agreement, e-mail is not considered a valid form of written communication.  

2. RESTRICTIONS:
    Copyright, Title, ownership rights, and intellectual property rights in and for the Software Product shall remain with Pret-a-3D and its suppliers. The Software Product is protected by the copyright laws of the United States and international copyright treaties. Title, ownership rights, and intellectual property rights in and to the content accessed through the Software Product is the property of the applicable content owner and may be protected by applicable copyright or other law. This License does not provide any rights to Recipient for such content.

    Recipient must maintain all copyright notices on all copies of the Software Product.
    Recipient shall not attempt to reverse-engineer, decompile or take actions to disassemble the Software Product.

3. DISCLAIMER OF WARRANTY:
    The Software Product is provided on an "AS IS" basis, without warranty of any kind, including without limitation the warranties of merchantability, fitness for a particular purpose and non-infringement. The entire risk as to the quality and performance of the Software Product is borne by Recipient.
    Should the Software Product prove defective, Recipient, and not Pret-a-3D, assumes the entire cost of any service and repair. In addition, the security mechanism implemented by the Software Product has inherent limitations, and Recipient must determine that the Software Product sufficiently meets Recipient requirements. This disclaimer of warranty constitutes an essential part of the agreement. 
    SOME STATES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO Recipient AND Recipient MAY HAVE OTHER LEGAL RIGHTS THAT VARY FROM STATE TO STATE OR BY JURISDICTION. 

4. LIMITATION OF LIABILITY:
    UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, TORT, CONTRACT, OR OTHERWISE, SHALL Pret-a-3D OR ITS SUPPLIERS OR RESELLERS BE LIABLE TO Recipient OR ANY OTHER PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER COMMERCIAL DAMAGES OR LOSSES. IN NO EVENT WILL Pret-a-3D BE LIABLE FOR ANY DAMAGES IN EXCESS OF Pret-a-3D'S LIST PRICE FOR A License TO THE SOFTWARE PRODUCT, EVEN IF Pret-a-3D SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES, OR FOR ANY CLAIM BY ANY OTHER PARTY. THIS LIMITATION OF LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY TO THE EXTENT APPLICABLE LAW PROHIBITS SUCH LIMITATION. FURTHERMORE, SOME STATES DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS LIMITATION AND EXCLUSION MAY NOT APPLY TO RECIPIENT.

5. TERMINATION:
    This License will terminate automatically if Recipient fails to comply with the limitations described within this Agreement. On termination, Recipient must remove the Software Product from all computers onto which it is installed, and must destroy or return all copies of the Software Product. 

6. EXPORT CONTROLS:
    None of the Software Product or underlying information or technology may be downloaded or otherwise exported or re-exported (i) into (or to a national or resident of) Cuba, Iraq, Libya, Yugoslavia (Serbia and Montenegro), North Korea, Iran, Syria or any other country to which the U.S. has embargoed goods; or (ii) to anyone on the U.S. Treasury Department's list of Specially Designated Nationals or the U.S. Commerce Department's Table of Deny Orders. By downloading  or using the Software Product, Recipient agrees to the foregoing and Recipient is representing and warranting that Recipient is not located in, under the control of, or a national or resident of any such country or on any such list.

7. MISCELLANEOUS:
   This Agreement represents the complete agreement concerning this License between the parties and supersedes all prior agreements and representations between them. It may be amended only by a writing executed by both parties. If any provision of this Agreement is held to be unenforceable for any reason, such provision shall be reformed only to the extent necessary to make it enforceable.
    This Agreement shall be governed by and construed under California law as such law applies to agreements between California residents entered into and to be performed within California, except as governed by Federal law. The application the United Nations Convention of Contracts for the International Sale of Goods is expressly excluded. 
NOTWITHSTANDING ANYTHING TO THE CONTRARY IN THE GENERAL LICENSE AGREEMENT, THE USER MAY NOT TRANSFER OR ASSIGN THE PRODUCT OR ANY COPY THEREOF, OR THE USER'S LICENSE TO USE THE PRODUCT TO A THIRD PARTY.
Manufacturer is Pret-a-3D, Aptos, CA 95003 USA.
http://www.preta3d.com,  reality@preta3d.com
© Copyright 2010-2011 Pret-a-3D All rights reserved.

</Text>
        </Document>
        <Document ID="8">
            <Title>Network rendering</Title>
            <Text>
With LuxRender we have an unlimited license to use as many CPUs and as many render nodes we want. Network rendering is accomplished by running the command-line version of LuxRender on each render node and then connecting the main render process to the nodes. Render nodes can be a mixture of Mac OS, Windows and Linux machines. 

To add render nodes we can follow this procedure:

- Install exactly the same version of LuxRender on every machine that will participate in the render process. The exact version means the revision number; you can mix Mac OS, Windows and Linux nodes without issue. For the sake of this tutorial we assume Luxrender 1.3
- Start the command-line processor on each node. On Mac OS we need to use Terminal.app, located in /Applications/Utilities. On Linux we can use any of the many terminal emulators available. On Windows we need to start cmd.exe.
- Run the luxconsole command in server mode by typing the command: `luxconsole -s`
- Take note of the IP address of the render node. For this example we assume that it is 192.168.0.2.
- We go back to the main machine where we have Reality installed, and start the render as usual.
- When LuxRender starts rendering the scene we click on the Network tab and add 192.168.0.2 in the Server input field. 
- We meed to repeat the process for every render node that we have.
- LuxRender will sends the scene and all the textures to the render node. If we look at the render node screen we will see the activity about the sent files. After a while the nodes will start sending samples and contributing to the render process.
</Text>
        </Document>
        <Document ID="96">
            <Title>Installing Reality</Title>
        </Document>
        <Document ID="98">
            <Title>METADATA</Title>
            <Text>latex input:            mmd-memoir-header
Title:                  Reality's User Guide
Subtitle:               Version 3.0
Author:                 Paolo Ciccone
Copyright:				2012-2013 Pret-a-3D/Paolo Ciccone
Affiliation:            http://preta3d.com
Base Header Level:      2
latex mode:             memoir
latex input:            mmd-memoir-pa3d-begin-doc
latex footer:           mmd-memoir-footer

</Text>
        </Document>
        <Document ID="99">
            <Title>Reality2_0UI_01</Title>
        </Document>
        <Document ID="100">
            <Title>The render never stops</Title>
            <Text>If you are not familiar with LuxRender, the above heading might seem a bit odd. LuxRender works by collecting light samples  in a endless cycle. &lt;!-- \index{Samples} --&gt; The renderer doesn't make the decision for us about when to stop; we stop the process when we are satisfied with the image. Many different factors can determine the time required for a satisfactory render. When we close LuxRender, the rendered image is saved on disk, in the image file that we have specified in the Render tab of Reality. In addition, LuxRender automatically saves the image every three minutes while rendering.</Text>
        </Document>
        <Document ID="10">
            <Title>More Reality resources</Title>
            <Text>##Support

If you need support for any Reality-related issues please enter a request via our [support form](http://preta3d.com/support)

##Information
You can find more tips and techniques at our forums: http://www.preta3d.com

##Stay updated with Reality!
Be sure to get the latest about Reality by visiting our website at http://www.preta3d.com
There you'll find news, tips on how to get the most out of your scenes, video tutorials and updates to this documentation. 

##Video tutorials
You can also subscribe to our YouTube Channel to find instructional videos on how to use Reality: http://www.youtube.com/user/PretA3D

##Social networks
For the latest about Reality and upcoming products be sure to "Follow," "Like" or "Circle" us on:

- Twitter: http://twitter.com/preta3d
- Facebook: https://www.facebook.com/RealityPlugIn#
- Pinterest: http://pinterest.com/preta3d/boards/
- Google Plus: https://plus.google.com/10662581615330416311

All content in this document is copyright © 2010 by Pret-A-3D. Reality plugin® is a Registered Trademark of Prêt-à-3D, Reality Engine and ACSEL (Automatic Custom ShadEr Loader) are all copyright © 2010 Pret-A-3D. All rights reserved.

**Reality: See the light!**

&lt;!-- \index{Infinite|see{loop}} --&gt;

&lt;!--
\appendix 
--&gt;
</Text>
        </Document>
        <Document ID="11">
            <Title>Acknowledgements</Title>
            <Text>
###The LuxRender development team
I personally want to acknowledge and thank all the developers and dedicated individuals who made LuxRender a reality, no pun intended. LuxRender is a real gem of a program. Through the genius and dedication of the developers we now have a state-of-the-art renderer that is available to everybody, on all major Operating Systems, and that has been designed to last a long time. 
 In particular we would like to thank David Bucciarelli, Jean-Philippe Grimaldi, Jens Verwiebe, Simon Wendsche, and Vlad Miller. Many thanks to all the other developers as well. LuxRender is a better program because of all of you!

Please go to http://www.luxrender.net and thank the generous people who made this possible.

###The Reality beta testing team
I'd like also to thank the invaluable beta testers who helped discovering several bugs. They did an astounding job at testing every part of Reality with as many models as possible and provided great feedback throughout the process. A big thank goes to: 

Angela Knight, Edward Ganges, Emily Smirle, Erik Wallace, Frederic Jouret, Ilja Baer, Jeff Kraschinski, Joe Thoennes, Joel Lovell, John Kosiorek, John Whiting, Julio Oliveira, Lyne "I'll test every feature" Frappier, Marcel Michorius, Martin Hoffmann, Neils Henriksen, Peter Kember, Robert Waetjen, Rose McClain, Sylvio Deutsch, Watson Prunier.

A special thank goes to Lee Furssedonn for providing 200 IBL light presets, in Poser and Studio format, for all Reality artists to use. 

A special thank goes to Russ Sprouse for proofing this guide and providing detailed notes and corrections. Special thanks to John Reilly also for helping with the mesh light and other great free props that John makes for the Reality community.

A huge thanks to Kim Frick for her continuos help with the Reality community and for supporting the program with her infinite generosity.

I also want to thank some of the Poser/Studio vendors who provided presets for their products. They are:

- Rafeeqah Llena from Shifting Images
- Eliot Gutierrez from http://freelancecomics.blogspot.mx/
- Janet Coulter  from Mistique Graphics

If I forgot anybody, my deepest apologies.

###The makers of [PS]
Reality [PS] Edition would not have been possible without the help of the dedicated, fun and skilled people at Smith Micro. I particularly want to thank Steve Cooper, Larry Weinberg, Stefan Werner, Uli Klumpp and Jack Walther for their great help. SmithMicro changed the actual code of [PS] to support Reality, a dedication that speaks volumes about their commitment to [PS] and its great community of artists.

###The one who made it all possible
Lastly I want to thank my wife Holly, for her saint-like patience in dealing with an "hermit" husband for the months that it took to develop Reality. She also provided invaluable help in reviewing and editing this manual… again.  If this guide is at all readable it's all because of her attention, amazing editorial skills, and great wisdom. All the mistakes are entirely mine.


_Paolo Ciccone, author of Reality_
</Text>
        </Document>
        <Document ID="101">
            <Title>The exported scene files</Title>
            <Text>Reality performs its task by reading all the information about the host scene and then generating a scene file using the LuxRender language. After the scene file is created, Reality then calls LuxRender and points the program to the scene file generated. Rendering starts as soon as the scene file is read, the rendering image will appear on screen, and this image will be automatically saved to disk.

The location and name of the scene file, ending in extension .lxs, is based on the image file name specified in the Render tab. For example, if you save your render as MyRender.png in the Documents folder, then Reality will create the MyRender.lxs in the same folder. You can change the name and the location to anything you want. By default Reality will place the rendered image file in your Documents folder but you can change this default in the Advanced tab. The image rendered by LuxRender is saved automatically to a PNG file. 

You can save a rendered image in PNG, OpenEXR (.exr) or Targa Format (.tga).</Text>
        </Document>
        <Document ID="12">
            <Title>Known issues</Title>
            <Text>
- The James low-resolution model has an error in the mesh. The hip area has inverted normals, they point inside instead of outside. For this reason LuxRender will not render the hip area. This is an error in the mesh, not in Reality or LuxRender. As a simple alternative use the high-resolution mesh, which doesn't have this problem. Alternatively give the poor man something to wear.
</Text>
        </Document>
        <Document ID="110">
            <Title>RealityMenu</Title>
        </Document>
        <Document ID="102">
            <Title>Installation</Title>
            <Text>Reality runs on both [osx] and [wos] (32 and 64-bit versions). The installation is automated by the Reality installer and most of the times all you will have to do is to simply click on the **Install** button and everything will be done in a few seconds. 

In this section you can find detailed information on every aspect of the installation process, just in case you might need more information.

##Distribution files
When you download Reality the program is distributed as a DMG file for [osx] or as a self-extracting zip file for [wos].

##[osx]
To start the installation on [osx] double-click on the DMG file, which will mount it in the Finder. 

# "Installing Reality on Mac OS"

From the DMG folder double-click on the RealityInstaller app and follow the instructions. See below for more details.

##[wos]
 The distribution file for installing Reality on Windows, as a self extracting zip file. This means that the file that you downloaded is an actual executable, a file with the .exe extension.

On Windows, double-clicking on the executable will show a window to select the destination folder for expanding the archive. Select a folder and confirm the operation. The result will be a folder with the name starting with "Reality". Open that folder and from there double-click on the RealityInstaller program to start the installation.

Figure &lt;!--\ref{wos-installer-zip.png}--&gt; shows the window that prompts for the destination folder for the archive extraction. The result of this operations will be to have, in this specific case, a folder called Reality_DS_w64 created in the same location where the self-extracting zip file is stored.

￼ "Uncompressing Reality on Windows"


After a few seconds you will get a folder on disk, and that folder includes the RealityInstaller.exe file. Double-click on RealityInstaller and the installation program will start.

 Please note of that [PS] and [DS] **must be closed** before running the Reality Installer.

##Installing [rpe]
The Reality installer automatically searches the hard disk of the computer to locate the right version of [PS]. The installer also verifies that the bitness of Reality matches the one of [PS]. In case you have multiple version of [PS] installed and the Reality installer selects the wrong one, you can change the selection by clicking on the **Change** button. Navigate to the folder when the desired version of [PS] is installed and select that folder.

If you need to install Reality for multiple versions of [PS], for example for [PS] 9 and [PS] 10, you will need to repeat the installation for each version of [PS].

￼ "[PS] Installer, [osx] version"

The installer provides some valuable information in the main screen. For the [osx] version the program confirms that this is a Universal binary, which means that it works both on 32 and 64-bit versions of [osx]. The second line from the top lists the full version number of the program. 

###Matching the bitness

The following only applies to [wos]; the [osx] version of Reality ships as a universal binary capable of running at both 32 and 64 bits.

With [wos] it's important that you select the installer that matches the bitness of [PS]. Please note that this is not the bitness of your OS. For example, [PS] 10 is a 32-bit program even if you install it on a 64-bit version of [osx] or [wos]. In addition, even the Pro version of [PS] will run at 32 bits if the computer and the OS are running at 32 bits.

Every plugin must match the bitness of the host. If you use 32-bit [PS] then you must install the 32-bit version of Reality. If you use a 64-bit[PS] then you must install the 64-bit version of Reality.

You can easily verify what is the bitness of [PS] by running the program and then selecting the **Scripts | Python Shell** menu option. The Python interpreter's window will appear	, and the first message includes the hint on what bitness is used:

￼ "[PS] Python Shell on [wos]"

In there we can see that [PS] is running at 64 bits because of the `[MSC v.1600 64 bit (AMD64)]` message. Please don't let the `win32` portion confuse you, the portion between square brackets is what matters. On a 32-bit installation that message will show as `[MSC v.1600 32 bit (Intel)]`.

Figure &lt;!--\ref{poserinstaller-w64.png}--&gt; shows the Reality installer running on 64-bit Windows for 64-bit [PS].

￼ "[PS] Installer, [wos] version"

###Props and Lights

Reality [PS] Edition includes the plugin itself, the Reality program, and a series of Props and Lights, which can be installed in any Runtime of your choice. The installer selects a suitable default location but that can be changed to any folder of your liking. Regardless of what folder is selected, the Reality Installer will automatically update [PS]'s configuration to include that Runtime, so that the Reality Props and Lights will appear in the [PS] Library.

When everything is set as desired, simply click on **Install** and the installation will start. In a few seconds the process will be completed and you will be able to use Reality.


##Installing [rse]

The Reality installer automatically searches the hard disk of the computer to locate the right version of [DS]. The installer also verifies that the bitness of Reality matches the one of [DS]. In case you have multiple version of [DS] installed, and the Reality installer selects the wrong one, you can change the selection by clicking on the **Change** button. Navigate to the folder when the desired version of [DS] is installed and select that folder. 
Please note that if you select a version of [DS] that does not match the bitness of Reality, the **Install** button will not become enabled.

Figure &lt;!--\ref{dsinstaller-osx.png}--&gt; shows the Reality installer running on [osx]. 

￼ "The [rse] installer on [osx]"

The installer provides some valuable information in the main screen. The first line confirms what version you are installing and the second line provides the complete version number.

Reality is composed of a plugin, which runs as an extension of [DS], and the Reality program itself, which provides the User Interface with which you configure the rendering of your scene.

The installer shows the locations for the plugin portion, the program portion and the props and light of Reality. The plugin portion must be installed where [DS] is installed.

The program portion can be installed anywhere. The installer suggest a location that is appropriate for your system but you can change that directory.

The same is true for the Props and Lights. The installer selects a suitable default location for those but it that can be changed to any folder of your liking. Regardless of what folder is selected, the Reality Installer will automatically update [DS]'s configuration to include that Runtime, so that the Reality Lights and Props will appear in the [DS] Content Library.


</Text>
        </Document>
        <Document ID="14">
            <Title>Welcome</Title>
            <Text>Thank you for purchasing Reality; we hope that you will have fun using it. &lt;!-- \index{loop|see{infinite}} --&gt;
 
Reality gives you a new way of rendering your [PS] or [DS] scenes by using physics-based rendering, the best way of creating realistic images from 3D geometry.

Reality is designed to enhance and simplify the conversion of the [PS] or [DS] materials and lights in several ways.

Reality has intelligent conversion of skin &lt;!-- \index{Material!Skin} --&gt;materials to provide a zero-click SubSurface Scattering (SSS) &lt;!-- \index{SSS} --&gt;configuration even for [PS] and [DS] materials that don't include SSS. 

Reality includes a fully-featured Material Editor that gives you the power of creating and modifying materials without the complexity of a node system. The Reality Material Editor is based on a modern User Interface design that promotes productivity and artist-oriented workflow.

# "The Reality Material Editor in action"

Reality [version] features at a glance:

- A wide selection of physically-based materials: 
    - Skin, with SSS
    - Water
    - Glass
    - Metal
    - Velvet
    - Glossy
    - Fog
    - Mirror
    - Cloth
    - Matte
- A large selection of texture types that can be mixed in any material:
	- Image Maps
	- Texture mixing
	- Bricks
	- Marble
	- Procedural noise
	- Cloud noise
	- Texture Combine
	- Distorted noise
	- Checkers
	- Wood
	- Texture math
- Automatic presets for popular skins and figures. 
- Material preset library.
- Image Based Lighting with support of HDR images and the SmartIBL (sIBL) format.
- Single-light, physically-based Sun light with indirect lighting, caustics, etc.
- Mesh-based lights, Spotlights, and point lights that can be used to simulate any real-life lighting fixture.
- Lighting can be changed while the image is rendering. Render status is saved automatically and can be stopped and resumed at a later time.
- Material preview right inside the Reality UI. 
- Automatic conversion of [DS] and [PS] materials to Reality's physics-based versions, including nodes and procedural textures from Poser.
- Volumetric fog.
- Stop and restart of the rendering.
- Network rendering.  Render nodes can be running Mac OS, Windows or Linux, making it possible to create low-cost renderfarms.
- Rendering runs independently of the host. You can  continue working on your scene while the rendering runs.
- Multi-core support, 32 and 64 bit support for Mac OS and Windows. 
</Text>
        </Document>
        <Document ID="111">
            <Title>Configuring Reality to use LuxRender</Title>
            <Text>Since Reality has to call LuxRender to do the actual rendering it's important that the location for [LX] is configured correctly. 

First, check that LuxRender runs correctly on your system. To do this, locate the folder in which it is installed and run the program called LuxRender (on [osx]) or luxrender.exe (on[wos]). If the program starts, close it and take note of the location. If there is a problem, check your installation and possibly re-install LuxRender. 

**IMPORTANT!**

Note that Reality **requires** LuxRender version [LX ver] or higher.  **Older versions are not supported and can cause problems**.  Newer versions are not certified and should be used with caution.

From inside [PS] or [DS] use the menu **Render | Reality Render Editor** to call Reality.

In the Render tab click on the *Renderer* option and set the location of [LX] by clicking on the *Change* button and navigating to the directory where [LX] is installed. The version of [LX] is verified and displayed above the [LX] path. &lt;!-- \index{[LX]!path to program} --&gt;

# "Location of LuxRender"


</Text>
        </Document>
        <Document ID="200">
            <Title>Volumes</Title>
            <Text>LuxRender includes a flexible, powerful volume system that controls how light behaves when it moves through objects or the space in-between objects. &lt;!-- \index{Volumes} --&gt;

Let's  consider, for example, when light traverses a body of water. The water absorbs the light at a rate that is proportional to the depth of the water. At higher depths light becomes dimmer and dimmer because it's absorbed by the volume of water. The LuxRender volumes simulate that kind of behavior.

Typically, when creating a scene that uses volumes  you create a set of volumes, which are then assigned to the interior and exterior of objects in the scene. The interior volume defines how light moves within the object, and the exterior volume defines how light moves through the space between the object it just left and the next one it encounters.

The interior volume setting is primarily used to give absorption and internal scattering to the object it is assigned to. In most cases we need to create a separate volume for any material for which we want to apply internal absorption and scattering of light. The exterior volume setting is generally used to provide atmospheric effects, and is kept the same for all objects in the scene.

You can create any number of volumes with Reality's Volume Editor. 

# "The Volumes Editor"

Click on the **Add new volume** button to create a new volume. There are two kind of volumes available: clear and scattered. &lt;!-- \index{Volumes!clear} --&gt;Clear is a simple volume that features refraction and absorption but no scattering. It is primarily meant to be used with clear materials, in particular the glass materials. A clear volume is created automatically by Reality when you use Volumetric glass or Water.

&lt;!-- \index{Volumes!scattered} --&gt;
The scattered volume represents a volume with an even distribution of microscopic particles. You can set a volume to be scattered via the **Scattered** checkbox. When used as an interior volume, it can be used for sub-surface scattering (SSS), cloudy liquids, or rendering an object as a cloud. Reality automatically generates a volume for SSS. &lt;!-- \index{SSS} --&gt;

The following video shows how to use Volumes with Reality [PS] Edition. It was originally made with Reality 3 but it still applies to the current version:

[￼](http://youtu.be/CcT6XS5C4bY) 

The following video shows how to use Volumes with Reality [DS] Edition:

[￼](http://youtu.be/SQkOlyIYNSA)

The parameters for a volume can be edited to your liking. The following section explains what those parameters do.

###IOR
&lt;!-- \index{IOR} --&gt;
This value affects the amount of refraction of light caused by the volume. As it is with glass, higher values cause higher refraction.

###Absorption Color
&lt;!-- \index{Volumes!absorption} --&gt;
The **Absorption Color** parameter controls how light is absorbed by a volume. Light traversing a volume is absorbed at a rate that is proportional to the distance traveled inside the volume. As the light goes further inside the volume it gets absorbed more and more. As a result the volume becomes darker and more saturated in color as it becomes larger.  The distance at which this phenomenon happens is controlled by the color of the volume and the **Clarity at depth** parameter, which is measured in meters.

More details about the absorption, from the LuxRender wiki: *"If a ray travels exactly the given distance, it will match the color you set. If it travels a shorter distance, it will be lighter and less saturated than the given color. If it travels farther than the specified distance, it will be darker and more saturated."*

###Absorption scale
As the name implies, this parameter is a scale factor for the Color parameter. Lowering this value will lead to less and less absorption performed by the volume. This number basically acts as an amplifier for the absorption color. It makes it easier to fine tune the final result instead of adjusting the color itself.

###Scattered
&lt;!-- \index{Volumes!scattering} --&gt;
The checkbox marked as **Scattered** is used to flag a volume as using scattering. When this option is enabled the **Scattering Color** and associated parameters become enabled. Scattering means that light, passing through the volume, gets reflected in different directions, as if it was bouncing against particles in the volume. 

###Scattering color
The scattering color determines the density and color of the particles inside the volume. While the value is using RGB the range for this parameter is higher than the limit for RGB colors. Higher values denote volumes that are denser. To help in expressing the right density Reality provides a parameter for the scattering color and for the scattering scale. Using the scale helps in amplifying the scattering beyond the strict RGB limit. Please note that, while the scattering can use any hue, it is generally best to set this value to a shade of grey, except when using the volume for SSS.

###Direction parameters
The last three values are the Red, Green and Blue direction. These parameters indicate the direction of the scattering of the light. Set at zero (0) will cause the light to be scattered equally in all directions. Set to a positive value will cause the light to be scattered forward, relative to the direction of the light. Set to a negative value causes the light to scatter in the opposing direction of the light source, similarly to what happens when one uses the car high-beams wheel driving inside fog.</Text>
        </Document>
        <Document ID="103">
            <Title>The Reality Add-ons</Title>
            <Text>Reality comes with a set of lights and props to help you get the most out of your scenes. See figure &lt;!--\ref{rug_realitylights.png}--&gt; or figure &lt;!--\ref{dazstudio_reality_lights.png}--&gt;.

&lt;!-- \index{Reality add-ons} --&gt; 
###Mesh Lights
&lt;!-- \index{[ML]} --&gt;
[MLs] are the most flattering and flexible lights that you can use with LuxRender. For this reason Reality includes a great [ML] prop that is designed to give you excellent control on the quality and position of the light.

In the Reality Lights folder you can find the Reality lights. There are two [MLs]: one that is positioned by default in a position suitable for portraits. The other is automatically placed above the default location for figures. 

# "The Reality lights in [PS]"

￼ "The Reality lights in [DS]"

The Reality [ML] has controls to set its softness with ease. Simply select the light in the scene and look in the Parameters tab, you will find a **Shadow Control** group. You can turn the light sharp by enabling the Sharp parameter. Or you can make the light very soft with  the, aptly named, VerySoft parameter. The light comes in the scene by default set as Soft. This gives you a very pleasant light that has visible soft shadows. 

The Reality [MLs] work well with the "Point at" function of [PS] or [DS].

￼ "[ML] adjustments in [PS]"

￼ "[ML] shadow control in [DS]"

####Gobo and Snoot
&lt;!-- \index{Snoot} --&gt;
&lt;!-- \index{Gobo} --&gt;
The [ML] offers also a great degree of control. The light includes a snoot that can be extended to prevent the spill of light. This allows you to focus the light on a limited area of the scene and can be a valuable tool in complex lighting situations. Extend the snoot using the Snoot parameter, which can be found in the Morphs group of the light.
Here is a 4-minute video that shows how to use the snoot in both [PS] and [DS], and what effects it has on the light:

[￼](http://youtu.be/wriLFRzn9mQ)

The gobo is a panel that *goes between* the light and the rest of the scene, hence the name "gobo." The panel can be decorated with a transparency map for shadow effects or turned to glass and set with a transmission texture for creating colorful light effects. 

###Sun light
&lt;!-- \index{Sun} --&gt;
Reality also includes a Sun light.  The Sun Light is a physically-accurate Sun light that also produces a sky. Reality exports the Sun and the sky as separate lights that can be adjusted in LuxRender while rendering the image. 

Note for [PS] users: unlike the [MLs], when you add the Sun light it will replace all the [PS] lights in the scene, if you _double-click_ on the icon. The exceptions are the Reality [MLs] since they are actual props and not [PS] lights. If you want to add the sun without removing previous lights drag and drop the Sun Light into your scene, instead of double-clicking on it.

###Single IBL Sets
Reality includes a set of 200 IBL lights prepared by Lee Furssedonn (Fuzzy70) and available for both [PS] and [DS]. These are great for quickly making portraits that use different shapes of light fixtures, circle, line, ring and so on, while taking advantage of the simplicity of set up of IBL. 

Each light has a well-made thumbnail that shows the expected result. See figure &lt;!--\ref{singleibls.png}--&gt; for an example of how they appear in the content library.


￼ "Single IBL lights in [DS]"

###Studio Cubed
&lt;!-- \index{Props!Studio Cubed} --&gt;
Studio Cubed is a model that simulates a photographer's studio. This model has been developed by John Hinton, aka Dumor3d at [Dumor3D.com](Dumor3D.com) and kindly provided to Reality artists for free.

The advantage of using Studio Cubed is that it provides an enclosed environment an for which the walls are UV-mapped and identified by separate materials so you can apply any photo or image to create great backgrounds with ease. 

Please note that the [PS] Main camera is by default placed outside the Studio Cubed but it is configured in a way to see inside the prop. For this reason it might happen that, when you render with LuxRender, the scene will be come out black. Make sure to move the camera inside the Studio Cubed space.

There are several materials presets that can be used to hide or show sections of Studio Cubed.
</Text>
        </Document>
        <Document ID="15">
            <Title>Reality2_Logo</Title>
        </Document>
        <Document ID="40">
            <Title>Light control</Title>
            <Text>Realism is achieved by careful use of lights. What Reality and LuxRender allow you to do is to avoid using the usual "cheats" of traditional 3D lighting and start applying lighting solutions that work in real life. If you have experience in photography then the way LuxRender handles lights will be immediately familiar. For example, if you need to fill a part of your scene with some soft diffuse light you can set a plane on the opposite side of the subject, facing the light source, and you have a beautiful "fill" without using an additional light. 
The following pictures show this principle in action. In figure &lt;!--\ref{rug_car.png}--&gt; we see a car lit by a single large mesh light suspended above it at an angle. Notice that the front of the car and its side are dark and we can't quite see the detail in those areas.

# "Simple lighting with top mesh light"

Instead of adding lights we can add a couple of planes, one in front and one on to the side of the car, to reflect the light from the top fixture. See figure &lt;!--\ref{rug_car_with_planes.png}--&gt;.

￼ "Adding reflectors to bounce the light"

Now the exact same scene, with no added lights, shows more details of the car. See figure &lt;!--\ref{rug_car2.png}--&gt;


￼ "More details visible without adding lights"

On a similar note, if the Sun light is too harsh we can place a plane between the Sun and your subject, then configure the plane to use the translucent Matte material which gives us a diffuser. A diffuser turns a harsh light, the Sun, into a soft light.  Think like a photographer and the software will react as expected. The sooner we get start thinking in terms of real light the sooner we start getting the right results.

We also need to remember that LuxRender requires fewer lights than [PS] or [DS]. In fact the number of lights needed is dramatically smaller. This is because LuxRender employes a physics-based lighting model and so light bounces around the environment in a natural way. It's a good thing, while you get used to the way LuxRender works, to do some tests with only one [ML] and see how that source reacts. You will be surprised at how much you can obtain from one single light source. </Text>
        </Document>
        <Document ID="120">
            <Title>Multi-edit</Title>
            <Text>Reality has support for multi-edit, the ability to edit one or more parameters for multiple selected materials. Simply select multiple materials either via  Shift-Click or Cmd/Ctrl-Click (Cmd for Macintosh, Ctrl for Windows), and then change whatever parameter you want. For example, you can change the glossiness level of all selected materials.

Multi-edit works also for changing textures, material types and texture values. All this can be done across multiple objects. </Text>
        </Document>
        <Document ID="112">
            <Title>soa_sun_light_demo_midday</Title>
        </Document>
        <Document ID="41">
            <Title>Screen grabs</Title>
        </Document>
        <Document ID="201">
            <Title>The Volumes Editor</Title>
            <Text>Reality includes a flexible, powerful volume system that controls how light behaves when it moves through objects or the space in-between objects. &lt;!-- \index{Volumes} --&gt;

See [Volumes][] for a explanation of how volumes work.

The Volumes tab in Reality allows you to create new volumes and to set up all the properties for LuxRender volumes. You can then attach volumes to materials, assigning them for the inner or outer portion of a material.

# "The Reality Volumes Editor"
</Text>
        </Document>
        <Document ID="104">
            <Title>Using Reality</Title>
        </Document>
        <Document ID="121">
            <Title>Save your Scene </Title>
            <Text>Reality saves its own data inside the host's scene, so when you save it, all the Reality materials and configuration data are saved as well. </Text>
        </Document>
        <Document ID="210">
            <Title>Modifiers</Title>
            <Text>In the Modifiers panel we find the parameters that allow us to change how the geometry behaves.

# "The Modifiers tab"</Text>
        </Document>
        <Document ID="42">
            <Title>ACSELConversionUtility</Title>
        </Document>
        <Document ID="113">
            <Title>soa_sun_light_demo</Title>
        </Document>
        <Document ID="202">
            <Title>Advanced settings</Title>
            <Text>The Advanced tab controls certain aspects of how Reality behaves and how it sets defaults for new scenes.

# "The Advanced options"

Let's see the values used in this tab one by one.

- Max material Previews cached. &lt;!-- \index{Material preview} --&gt;When you work in the Material Editor, Reality shows you a preview of the material you are working on. To speed things up, Reality keeps a certain number of materials in memory. This value determines how many material previews are kept at any given time in memory (cache). The default is five. Higher numbers will give you faster response from the program at the cost of a little more memory used.
- LuxRender Display refresh interval. When Reality generates a LuxRender scene it sets how often LuxRender should refresh its display. This value controls that interval.
- LuxRender write interval. This value determines how often LuxRender will save the rendered image.
- Ignore [ILs]. [ILs] generally render very poorly in LuxRender. &lt;!-- \index{[IL]} --&gt;They are an artificial construction of biased renderers and are generally not useful at all with unbiased renderers like LuxRender. Since there are several pre-made light sets designed for the host that employ Infinite Lights, this setting is a handy way to avoid having to remove those harsh lights by hand.
- Convert [ILs] to mesh lights. This is an alternative approach to using [ILs]. When this value is set Reality will convert the [ILs] to large [MLs] floating above the scene. This approach removes the harshness of [ILs] while keeping the contribution of the light to the scene. Results can vary widely, depending on the setup. Nevertheless this flag can be easily turned on or off before exporting to compare the result of its influence.
- Convert Spot lights to mesh lights. &lt;!-- \index{Spotlight} --&gt;This flag acts in a similar way to the one for Infinite Lights. A very small mesh light will be created in place of the spot. This option will produce a more pleasant, less harsh light, but the mesh light will not have the characteristic cone. It will be just positioned and oriented in the same way of the original spot. This flag can also be toggled on or off before exporting the scene to LuxRender.
- Use native OS Look. If enabled, this box will cause Reality to switch its look to be like a native Mac OS or Windows application.
- Keep UI responsive. When running LuxRender the program, by default, takes control of all the cores present in you computer. This can, sometimes, render the User Interface of the computer sluggish. By enabling this option you tell Reality to automatically leave 10% of the computer's cores available. This makes the UI more responsive.  

The second group of values is grouped under the label **Defaults for new scenes.**  Those values affect how Reality configures a new scene when it's created inside the host.

- LuxRender GPU acceleration On. If this value is enabled then the GPU acceleration will be enabled for all new scenes.&lt;!-- \index{GPU} --&gt;
- Overwrite warning On. If this value is enabled Reality will ask you confirmation before overwriting the LuxRender scene file and the related rendered image, if they exist before exporting the scene to LuxRender.
- OpenCL Group size. Some nVidia drivers have a bug that causes the image to be completely black if the OpenCL group size is not set to 64. By setting this value here we avoid having to set it for every new scene. &lt;!-- \index{OpenCL} --&gt;
- Location for new scene files. This field can be used to change the default directory where Reality creates new files for the render. Reality sets the location for the .lxs file and the image file generated for the render. The default location selected by Reality is the Documents folder of the user. If we change the location in the Advanced tab then Reality will use that directory from that point on.
</Text>
        </Document>
        <Document ID="18">
            <Title>Rendering workflow</Title>
            <Text>The workflow for using Reality is simple. The basic steps are: 

- Create the scene
- Add your lighting
- Run Reality and, optionally, edit some settings
- Render
 
###Create the scene

First you create your scene in [PS] or [DS] as you would normally. Don't spend too much time setting the materials in the host as you will be doing all the fine-tuning in Reality. Setting the basic textures for characters and props is generally all that you have to do. 

###Add your lighting 

Lighting is 80%of your image so this is a crucial step. Physically-accurate lights will deliver a more realistic result. 

Lights, in real life, have a size and that size directly influences the quality of the light. A large light gives a soft light with soft shadows. A small light produces a harsh light with sharp shadows. 

Spotlights and [ILs] are not physically-based. Spots can be used from time to time but the top rule of good lighting with Reality is: never use an [IL].

Instead, your best friend in this category is the [ML]. A [ML] provides a very flattering light that is easy to control and that will invariably give you a great result.

As you start working with Reality I suggest that you keep things simple and use the [ML], which can be found in the Reality folder in the host. 

- For [PS] you need to click on the Lights category in the Library and find the Reality folder.  See figure &lt;!--\ref{rug_realitylights.png}--&gt;.
- For [DS] you need to look in the Content Manager, under **[DS] Formats** group and locate the Reality folder. See figure &lt;!--\ref{dazstudio_reality_lights.png}--&gt;

While you're becoming familiar with the Reality way of working, it's best to use one or more Mesh Lights. Mesh lights give you the best result and so it's easier to work with them. Once you become more experience you can start adding other fixtures like spots, the sun or IBL.

A [ML] generally provides a very nice, diffuse light that projects soft shadows. It produces a pleasant result with very little work. Please note that [PS] and [DS] will not recognize the Reality [ML] as a light so you will not see the effect of it in the host preview. Simply orient the front of the [ML] to point in the direction you want the light to shine. 

If you need sunlight simply add the Sun light provided with Reality. 

###Run Reality 

After you're done setting up the lights, launch Reality. You can launch Reality by clicking on the *Reality Render Editor* option in  the host's Render menu.

When invoked, Reality will recognize the lighting you added. For example, if you added the Sun light, it will configure a lighting system for LuxRender that includes the Sun light and the sky. Keep in mind that the angle of the sunlight will determine its look. 

For example, if the sun is directly overhead (zero degrees), or it's pointing down at a sharp angle (between 0 to 30 degrees),  it will be interpreted as midday sun. On the other hand, if you make the sunlight almost horizontal (60 to 90 degrees), it will be interpreted as the sun at sunrise or sunset, and therefore the light will have a distinctive orange shift.

Figure &lt;!--\ref{rug_sunabove.png}--&gt; shows a scene with a temple and the sun, a [IL], positioned almost vertically. The light is only used for illuminating the scene in the host, it will not be used for rendering.

# "Sun Vertical in the scene"

And we can see the result in figure &lt;!--\ref{rug_sunverticalscene.png}--&gt;.

￼ "Vertical Sun - result"

Now, we can simply rotate the Sun light to be almost horizontal. See figure &lt;!--\ref{rug_sunhorizontal.png} --&gt;

￼ "Horizontal Sun in the scene"

By applying the rotation we not only get a different angle in the light, but also a different quality of the light, it shifts to orange, as you would expect to see at sunset or sunrise, when the sun is closer to the horizon. Figure &lt;!--\ref{rug_sunhorizontalscene.png}--&gt; shows the result.

￼ "Horizontal Sun - result"

###Modify

The Reality UI provides full control over the final result of the render. You can modify the type of materials used for each material zone defined in the host and fine-tune all the parameters involved.

###Render

For your first render simply click on the **Render** tab, and from the click on the **Render frame** button. See figure &lt;!--\ref{reality-render-tab.png}--&gt;.

￼ "The Render options"

When you do that Reality exports the host's scene to a series of files on disk using the LuxRender format and then calls LuxRender to render that scene  (see the Render tab for setting the file names for the LuxRender scene and for the image file). In just a few seconds you will see the LuxRender window appear.  

LuxRender renders a scene in a different fashion than the 3Delight or Firefly. Instead of starting from the first line at the top and then progressing toward the bottom of the image, LuxRender renders the whole image in one pass, which usually takes a few seconds. 

This first pass is very coarse but it gives an overall idea of the result. In a few seconds LuxRender will refine the image and the cycle continues until you quit LuxRender. LuxRender **saves your file automatically to disk**, using the PNG format by default. You can change the location and name of the file in the Reality Render tab. LuxRender saves the file at intervals established in the Advanced tab of Reality. When you quit the program the latest version of the render is saved automatically. 

</Text>
        </Document>
        <Document ID="130">
            <Title>DistopyaToMatte</Title>
        </Document>
        <Document ID="43">
            <Title>AdvancedOptions</Title>
        </Document>
        <Document ID="211">
            <Title>The dockable panel in [PS]</Title>
            <Text>Reality provides a convenient panel that can be docked in the Poser UI. This panel provides a bit of information about the objects handled by Reality and two convenient buttons:

# "The Reality Dockable Panel"

The first button calls the Reality UI; it works like the option in the Render menu. The other button, labelled **Render Frame**, does the same thing as the **Render Frame** button in the Reality UI.

These two buttons can easily speed up your workflow.

To open the Reality Panel in [PS], go to the Window menu and select **Addons | Reality**. You can dock the Reality Panel in any part of the  [PS] UI that you find convenient.
</Text>
        </Document>
        <Document ID="44">
            <Title>Camera</Title>
        </Document>
        <Document ID="114">
            <Title>Sun_oriented_midday</Title>
        </Document>
        <Document ID="203">
            <Title>RugCover</Title>
        </Document>
        <Document ID="131">
            <Title>FogScene</Title>
        </Document>
        <Document ID="220">
            <Title>Output</Title>
            <Text>
# "The Output group"
 
A LuxRender scene is generally composed of a few files. The way Reality exports your host scene to LuxRender is via two main files:

- **reality_scene.lxs**  This base file contains the general scene definition, including the resolution, format, and name used for the rendered image. 
- **reality_scene.lxi** This file contains the definition of the objects in the scene.

The Render tab allows us to change the name of the base file, which will also determine the name for the .lxi include file. These files and their purposes are mentioned here purely to provide all the information necessary to back up and transfer your scene files. Copying the .lxs file alone is not enough. We have to get the corresponding .lxi file as well. 

The options in the Output group are: &lt;!-- \index{Output options} --&gt;

**Image file name**
In this field we specify the name and folder of the image file that we want to obtain when we render. By default a PNG file is generated. &lt;!-- \index{PNG} --&gt;

**Image format**
The output file formats supported for your render are PNG, EXR, and Targa. 

**Gamma** &lt;!-- \index{Gamma} --&gt;
The Gamma Correction used to generate the image file. Gamma correction is applied to determine the treatment of midtones when an image is converted from the internal, full spectrum, light representation of LuxRender to the RGB color space. Usually this value doesn't need to be changed. Reality knows what is the appropriate Gamma value for the Operating System. 

**Geometry format** &lt;!-- \index{PLY} --&gt;
Exporting a scene to LuxRender involves writing a very long series of vertex and polygon data. There are two main file formats that we can use: the native LuxRender text file and the PLY file format. PLY can be written in either text or binary format. Even with the text variant PLY is generally more compact than the LuxRender native format. Binary PLY format is less than half the size of the LuxRender native format. Smaller files not only require less disc space but they take much less time to be written by Reality and much less time to be read by LuxRender. By default Reality sets the file format to PLY Binary. Reality 3.0 only supported the LuxRender native file format. If you re-render a scene that was created with Reality 3.0 Reality will automatically set the file format to binary PLY.

**Alpha Channel** &lt;!-- \index{Alpha channel!rendered image} --&gt;
The Alpha Channel checkbox allows you to create an alpha channel for your scene in case you want to do background replacement in graphic packages like Adobe Photoshop. When this option is selected, any part of the scene that is not covered by some object will be set to be transparent. 

**Frame size**
The size of the render is taken directly from the host but you can also select to have the final render at 100%, 75%, 50% or 25% of the size, or at 200%, 300% and 400% of the size. This is a great way of making test renders that take a fraction of the time of the final scene. The "% of frame rendered" parameter is persistent, and it's remembered across invocations of Reality for the same scene. 

**Max samples** &lt;!-- \index{Samples!Maximum} --&gt;
The "Max Samples" value is used to force LuxRender to stop rendering after a given number of samples per pixel is reached. Leave it at zero for no limit. This value is also necessary for the rendering of animations. Setting it, for example, at a value of 500 will stop the rendering of a frame when that number of samples has been reached, and will cause LuxRender to start rendering the following frame. Otherwise, if left at zero, LuxRender would never move past the first frame in the series.

**Overwrite Warning** &lt;!-- \index{Overwrite warning} --&gt;
When this checkbox is enabled Reality will warn us if the scene file (.lxs) that we are creating for the export already exists on disk. We can then decide to overwrite it or not. This flag is saved for each scene. The default for new scenes, on or off, is decided by the setting in the Advanced tab.

**Preserve Light hue** &lt;!-- \index{Light hue} --&gt;
When the camera faces a light, and that light has a certain color, or hue, the objects lit by that light will take the hue but the light source itself will render almost pure white. If we enable this option then the light hue will be preserved.

**No Displacement**
This option globally turns off the use of displacement maps for all materials. It can be useful to create quick test renders since displacement can add quite a bit of time during rendering. By turning it off we can obtain a test render without modifying the materials. Once the test render is done the option can be disabled to return to full-quality rendering.</Text>
        </Document>
        <Document ID="45">
            <Title>DeleteACSELShader</Title>
        </Document>
        <Document ID="123">
            <Title>Reality material reference</Title>
            <Text>##Reality material reference

Reality provides access to most of LuxRender's materials. Reality materials are designed to provide all the advantages of using LuxRender's physics-based materials but without the complexity generally found when using renderers of this kind. LuxRender materials, and therefore Reality's, are defined by a series of properties and textures. What LuxRender calls "textures" other systems call "nodes." 

For example, the [PS] material editor uses a wide array of nodes to define its materials. The term node is a bit vague and it refers more to the way information is stored in the computer's memory than to what it represents. LuxRender's use of the word texture is more accurate. A texture is not just an image stretched over a surface. A texture is anything that generates a visual pattern or image. 

A brick node, common in many 3D apps, generates a brick pattern. We are correct in calling that function a "brick texture" and that is exactly how it's called in LuxRender.

Reality allows you edit and create most of LuxRender's textures. Some of those textures will be the result of the conversion process from the original materials. Others can be defined by us from scratch by using the powerful Reality Texture Editor.

Each texture is shown in the material editor in a small rectangular area called the "Texture Preview," see figure &lt;!--\ref{rug_tet-01.png}--&gt;. Clicking in the texture preview itself will open the texture in the Texture Editor, where you can change the properties of the texture or even convert it to a whole new type. A complete explanation of how the Reality Texture Editor works is in [Editing Reality textures][RTE]. &lt;!-- \index{Texture Editor} --&gt;

Next to the texture preview there is a gear menu where you can select a few of other features. When clicking on the gear button a menu will be shown providing the following options:

- Use existing. This option allows you to select an existing texture for the channel that you are editing. This is called "linking to a texture." For example, you can define a texture for the bump map channel and then link to it from the displacement channel. Any modification done to that texture will be reflected in all channels using it.

- Edit. This is the same as clicking on the texture preview: it loads the texture in the editor.

Now that we know the right terminology to understand the Reality materials, let's see what kind of materials are available and what kind of properties they have. </Text>
        </Document>
        <Document ID="212">
            <Title>RUG_NormalMap</Title>
        </Document>
        <Document ID="46">
            <Title>GearMenu</Title>
        </Document>
        <Document ID="140">
            <Title>ShapePreview</Title>
        </Document>
        <Document ID="115">
            <Title>Sun_oriented_sunrise</Title>
        </Document>
        <Document ID="204">
            <Title>RUG_RealityLights</Title>
        </Document>
        <Document ID="132">
            <Title>FogSceneFrom[host]</Title>
        </Document>
        <Document ID="72">
            <Title>ghost_racer_r</Title>
        </Document>
        <Document ID="221">
            <Title>Texture collection</Title>
            <Text>**Collect Textures**
Collecting textures allows you to store all the textures for the scene in a directory, from where they can easily be copied. This can be necessary, for example, when you need to move the scene to a different computer. Reality creates a subdirectory named by appending *-resources* to the name of the image file. For example, if the image file is called "reality-scene.png" then a directory named "reality-scene-resources" will be created at the same folder where the image file is stored. In that directory Reality copies all the files necessary to render the scenes. There is where the collected textures are stored.

**Texture Size**

Together with *Collect Textures* this option allows you to greatly reduce the amount of memory required to render your animation by resizing the textures. For example you can set each texture to be no wider than 1024 pixels. 
During the texture collection Reality will check the width of each texture and compare it against the maximum value selected. If the value is higher, then the texture is resized. Reality saved the scaled texture as a PNG file to avoid loss of data due to transcoding. 

The minimum size of the texture is 256 pixels wide (0.25K). The maximum is 2048 pixels wide (or 2K). The last value for this slider is *Full size.* This allows you to collect the textures without resizing them. **Please note that this option does not need to be used with standard CPU rendering. Scaling texture is something that is normally required when suing the Pure GPU rendering. GPUs have much lower memory available and texture can easily fill it. When using standard CPU rendering this option should be set to *Full Size* **.</Text>
        </Document>
        <Document ID="124">
            <Title>soa_translucent_lamp</Title>
        </Document>
        <Document ID="213">
            <Title>RUG_RealityPanel</Title>
        </Document>
        <Document ID="47">
            <Title>LightEditor1</Title>
        </Document>
        <Document ID="73">
            <Title>Ghost_racer_reflector_added</Title>
        </Document>
        <Document ID="205">
            <Title>RUG_MeshLightAdj</Title>
        </Document>
        <Document ID="230">
            <Title>Convert_to_light</Title>
        </Document>
        <Document ID="133">
            <Title>Glass_no_tfc</Title>
        </Document>
        <Document ID="222">
            <Title>Acceleration</Title>
            <Text># "Acceleration options"

If our computer has a OpenCL-compatible video card (note, this is different from OpenGL) we can now take advantage of that additional computing power by selecting this option. &lt;!-- \index{OpenCL} --&gt;

There are currently two types of acceleration possible: *Pure GPU* and *Hybrid GPU*. &lt;!-- \index{Pure GPU} --&gt;&lt;!-- \index{Hybrid GPU} --&gt;

See [GPU-based Rendering][] for more details on how to use GPU acceleration.

The other options available are:

- Num GPUs. This options must be set to the number of GPUs installed in your machine, regardless if they will be used or not during the renderer. Reality has no way of gaining this information from the OS so this value must be configured manually.
- GPUs enabled. In some cases, if there are more than one GPU installed, we might desire to not include one or more GPUs in the rendering process. This series of checkboxes allows us to do so. For example, if the second GPU needs to be excluded from rendering, then checkbox marked *2* must be disabled. Reality supports up to a maximum of three GPUs.
- OpenCL group size. For certain video cards it is necessary to set this value. It's generally best to start rendering with this value set at zero. If the image, while using GPU acceleration, is completely, solid black then try changing this value to 64.

</Text>
        </Document>
        <Document ID="74">
            <Title>Light types</Title>
            <Text>Reality supports the following types of lights:

- [ML] &lt;!-- \index{[ML]} --&gt;
- Spotlight &lt;!-- \index{Spotlight} --&gt;
- Projector &lt;!-- \index{Projector} --&gt;
- Point light &lt;!-- \index{Pointlight} --&gt;
- Sun light &lt;!-- \index{Sun} --&gt;
- [IL] &lt;!-- \index{[IL]} --&gt;
- IBL &lt;!-- \index{IBL} \index{Image Based Lighting} --&gt;

##[MLs]
&lt;!-- \index{[ML]} --&gt;
These are also known as Area Lights and they are geometric meshes that emit lights. These are generally the best choice for creating good lighting and for achieving realism. Reality includes two ready-to-use Meshlights:

- MeshLight: this is a simple light fixture with a front panel that is preconfigured to work as a light-emitting  object. It  provided  beautiful lighting and it has very few polygons so it doesn't require much memory.
- Top Mesh light: a mesh light that is conveniently positioned to shine from top to bottom.

# "Reality lights in [PS]"

￼ "Reality lights in [DS]"

We can also create a mesh light by simply adding a plane or any other primitive, and rename it "RealityLight."  After that we simply orient it in the direction we want it to spread light. A cube will emit light from all six sides, and a plane will emit light from the direction pointed by its surface normals. If we need more light sources we can simply create more primitives and add a suffix to the name: RealityLight_1, RealityLight_fill, RealityLight_hair, etc. The important thing is that the object's name starts with "RealityLight." Capitalization has to be exactly as in the examples given. In general it's just simpler to use the [MLs] provided. 

The Reality [MLs] have controls made to help in both positioning them and setting the type of light that they generate. In the real world the quality of a light is determined by the size of the light. For example, a large light generates a very diffuse light with soft shadows. A small light generates a harsh light with sharp shadows. The brightness of a light has nothing to do with its sharpness. It's the size that affects the quality of the shadow. For this reason the Reality [ML] has controls to change its softness and those controls achieve the effect desired by changing the size of the light. See the Parameters panel in [PS] or [DS].

When we add a [ML] to the scene it is set to use the *Soft* preset, which provides a visible soft shadow. We can enable the other settings, for example, *VerySoft*. In that case we need to remember to disable the previous preset. In this example we need to set the *Soft* preset to 0 after we set the *VerySoft* preset to 1.

##Sun Light
&lt;!-- \index{Sun} --&gt;
This is an [IL] that is named Sun. With this light Reality will export to LuxRender a Sun plus atmosphere which will be rendered beautifully. The angle of the Sun will also determine the type of light. If the sun light is horizontal it will look yellow-orange. On the other hand, vertical sunlight sun will look cooler and more on the blue side of the spectrum. **The position of the Sun in the scene is not relevant, only the angle is.** You can place the Sun wherever it is convenient for you.  Of particular use is the *Sun size* control. With that you can make the sun, if it's visible by the camera, appear larger than the default size determined by LuxRender. The turbidity parameters can be used to create a more visible atmosphere. The default of 2.2 is what is normally used by Reality.

Reality generates a separate light group for both the Sun and the Sky so that you can adjust their balance in LuxRender while rendering. Look in the "Light groups" tab of LuxRender and you will find a "sun" and "sky" group that you can adjust independently from each other. For this effect to work we need to use the "Linear" tonemapper.

￼ "Selecting the Linear tonemapper in LuxRender"

##Spotlights
&lt;!-- \index{Spotlight} --&gt;
A spotlight from the host is converted to use the exact same orientation, position, and cone angle in LuxRender. The color of the spotlight is also preserved. If the light's color is any shade of gray then the standard color temperature of 6,500 Kelvin is used. This can be changed dynamically in LuxRender when the scene renders. Spotlights usually have a soft area around the edges, where the light is "feathered." [PS] or [DS] don't have that control and so Reality sets the edge feather at 5 degrees. It can be adjusted to other values in order to make the edge as soft or as sharp as we need.  We can also set a texture for the Spotlight. This turns the spotlight into a projector.

##Projectors
&lt;!-- \index{Projector} --&gt;
A projector light acts as expected: it projects an image map similarly to what a physical image projector does. This is obtained by applying an image map to a Spotlight. The width of the spotlight, the angle of the light and the shape of the receiving surface will affect the final result. The following video shows how to create projectors using Reality [PS] Edition. It shows version 3 but it's still current.

[￼](http://youtu.be/lozfDq33J4U)

The following video shows how to create projects with [DS]:

[&lt;$img:../images/RUG_DSprojector.png;w=298&gt;](http://youtu.be/kmfH1qc0nRc)

##Point lights
&lt;!-- \index{Pointlight} --&gt;
Reality supports point lights, which are light source that emit light in all directions. Point lights are also enabled to use IES profiles. See the description about IES lights below. Keep in mind that point lights are possibly one of the least desirable lights to be used in a scene. Artistic lighting is all about control and point lights are the hardest to control because they emit light in all directions (360 degrees) . There are legitimate uses of point lights but they are much less used with LuxRender than with [PS] or [DS].

##[ILs]
&lt;!-- \index{[IL]} --&gt;
This kind of light is used to simulate the sun and ambient light with biased renderers. They have little or no use with LuxRender and should not be used whenever you plan to render your scene with LuxRender. If you use one for seeing the objects in the scene you can then disable it in the Reality light editor so that it has no influence in the final render. **[ILs] generally produce the worst type of light and detract from the overall realism.**

##Image Based Lighting (IBL)
&lt;!-- \index{IBL} --&gt;
Image Based Lighting provides some the highest levels of realism and it is fully supported in Reality. Reality also supports the Smart IBL (sIBL) format pioneered by HDRLabs.com. With sIBL you can set up a full IBL scene with preview in the host with one click of the mouse.</Text>
        </Document>
        <Document ID="125">
            <Title>1.2</Title>
        </Document>
        <Document ID="214">
            <Title>RUG_Car</Title>
        </Document>
        <Document ID="150">
            <Title>Scene configuration</Title>
            <Text>LuxRender can use a myriad of different rendering options based on the type of settings. The parameters are really complex and can make a grown man cry. To make things simpler Reality groups all those settings in a series of "Scene types." 

Most of the time you will need to use just the Monodirectional type. There is also a Bidirectional option but that is generally only used with the non-accelerated rendering, which was the default before Reality 4.1.

**Scene Parameters Editor**

Reality gives you the option to edit the internal rendering parameters passed to LuxRender for each scene type. This allows you to optimize LuxRender for the specific scene that you are rendering. This option is best used by people who are quite familiar with LuxRender's internals. Otherwise you can simply continue with the defaults.</Text>
        </Document>
        <Document ID="117">
            <Title>Key concepts</Title>
        </Document>
        <Document ID="206">
            <Title>RUG_MaterialEditor7</Title>
        </Document>
        <Document ID="75">
            <Title>Converting materials to lights [mats to lights]</Title>
            <Text>We can turn any material into a light by right-clicking on its name in the material list and selecting "Convert to light." When this option is used the material will be removed from the list and instead a light with the same name will be added in the Light tab. 

# "The 'Convert to light' option"

Alternatively we can make a material to emit light by enabling the **Light emission** flag in the Modifiers tab. Both options are valid. The **Light emission** approach provides an additional level of flexibility because we can preserve the material texture and then add an additional texture to define the light emission pattern. See [Light emission][] for more details.

When we convert a material to a light, if the source material has an image map attached to it, then the light will also have the same texture with the result that the light will be colored with the image map. This setup can be used to create glowing objects like monitor screens of TVs. When using this type of light it's important to adjust the exposure &lt;!-- \index{Exposure} --&gt;of the image so that the converted light is not overexposed. Overexposing will wash out the image detail resulting in loss of detail. To correct this issue we can simply switch the LuxRender tonemapper to Linear and adjust the exposure until the light regains detail.

Material to light conversion can be used effectively to convert a large amount of scene elements into LEDs and other light sources.

When a material is converted to a light Reality automatically assigns the light to a light group that has the same name of the material. In this way it's very easy to adjust the brightness of the material while rendering. Please make sure to set the LuxRender tonemapper to Linear so that the result works as expected.

To revert a light back to a material, click on the **Convert to material** button in the Light Editor.
</Text>
        </Document>
        <Document ID="134">
            <Title>Glass_tfc</Title>
        </Document>
        <Document ID="223">
            <Title>Scene_configuration_editor</Title>
        </Document>
        <Document ID="48">
            <Title>LightEditor2</Title>
        </Document>
        <Document ID="76">
            <Title>The Light Editor</Title>
            <Text>##The Light Editor

Reality has a sophisticated light editor that allows us to control all the aspects of each light.  The "Light properties" panel below the list of lights allows us to edit the characteristics of each light.  The light editor automatically shows only the controls that are relevant for each type of light. 

# "The Light Editor"

Here is the meaning of each field:

- Gain. This is a multiplier of the power of a light. It's very useful when we want to say things like "this light is three times as powerful as the others."
- Power. The brightness, in Watts, of a light.
- Efficiency. This number is the percentage of lumens per watt that the light generates. If the watts parameter indicates how much power the light receives in input, the Efficiency (efficacy value in LuxRender) indicates out much output the light generates. This number only makes sense when we use multiple lights. In figure &lt;!--\ref{light_efficiency.png}--&gt; we can see two spotlights that are positioned at the same distance from the wall and have exactly the same power: 100 watts. The light to the right has an efficiency of 35 while the one on the left was kept at the default of 17. As we can see, the light on the right, while having the same wattage, is twice as bright.

￼ "Light Efficiency example"

- Light Group. In LuxRender we can change the brightness, color temperature and RGB value of light groups. We can also turn off light groups. Please notice that we are talking about light **groups**,  not single lights. Of course we can create a group for each individual light, a trick that will give us the ability to control each light during rendering. This field in the Reality Light Editor allows us to set the light group for each light. Lights that use the same light group will be grouped together in LuxRender.
- Invert direction. This setting is useful only for [MLs] and, if enabled, it flips the direction toward the light shines respective to the surface of the [ML]. This option can be useful if we convert a sky dome to be a light and the dome, because of the orientation of the normals, shines the light outside instead of inside. Without having to re-arrange the direction of the vertex normals of the dome we  can invert the direction and having it shine the light inside.
- Alpha channel.  &lt;!-- \index{Alpha channel} --&gt; This options adds an alpha channel to the light. The alpha channel works with an image map associated with the light, the *Image file* field explained below. If there is an image map present then any black pixel in the map will be transparent in the light. To illustrate this technique here is a quick demonstration:
	- Let's add the *Studio Cubed* prop from the Reality props.
	- Let's add a Reality Simple Plane to the scene. While both [PS] and [DS] have their own plane primitive the Reality version is assured to have a UV map that works as expected.
	- Let's rename the plane *RealityLight* so that it will be converted to a [ML] in Reality. 
	- Let's add *Milkman Andy* and move it just behind the plane
	- In Reality we click on the *Lights* tab and select the [ML] that we just created.
	- In the *Image file* field we add an image file of our choice. For this tutorial I have created a 512x512 jpeg file all set to black with a the word "REALITY" painted in white.
	- In the following illustration we can see the setup. I also changed the material of the Simple Plane in the host to show the same image map painted on it. This is not important for the result, it's presented here only to give a visual cue of how the image file will be mapped onto the light.

￼ "Meshlight with image map"

The result of rendering that scene is visible in figure &lt;!--\ref{light_alpha_demo.png}--&gt;

￼ "Meshlight with image map and alpha channel"

We can notice that the area that is black is completely invisible. In fact it seems that we have modeled a high-detail light-emitting logo. This technique can be used for many interesting effects.

- Color model. You can set the color of a light based on the desired "model." If you are a photographer you are probably comfortable with color temperature. This is the physical model of light and the default one. You can simply move the slider and go from a very warm light, 1,800K for example, to a cold one, 8,000K and set your light from all ranges from candle light to bright sun light. See the **Color Temperature** section below for more details on this topic.
If you prefer to dial in a specific color, simply select the RGB model and you will see the familiar color picker. The last option is to select one of the light presets defined in LuxRender based on real spectral data. These presets are useful, for example, if you want to accurately reproduce the light of a neon tube. Create a cylinder in the host, convert its material to a light and then select the preset for neon.
- Image file. This field changes meaning depending on the light. For Spotlights this field can be used to specify an image to project. That creates a projector light as described at the beginning of this chapter. For Meshlight the image will be mapped to the surface of the mesh and the colors from it will generate colored light areas. 
- IES File. Manufacturers of lamps and light fixtures like Philips, Osram and Sylvania measure the light properties of their products with accurate instruments that report the light characteristics. The data provides information on the light quality, the pattern of illumination and the falloff. The manufacturer then publishes the information using a file format known as IES, which takes its name from being defined by the Illuminating Engineering Society. Many IES files are available for free from the manufacturer's website. A quick web search provides several links to try. LuxRender supports the use of IES files to define the properties of some lights, specifically we can use IES files with point, spot and mesh lights. When using an IES file the shape of the light becomes irrelevant and the resulting light pattern is shaped by the data in the IES file. Figure &lt;!--\ref{ies_demo.png}--&gt; shows a mesh light, made with the *Simple Plane*, first by itself and then modified with an IES file from  [Lithonia Lighting](http://www.lithonia.com) . The file describes a "6-inch open downlight with tall black baffle reflector."

￼ "A Meshlight modified with a IES file"

The Reality Light Editor allows you to control all the light parameters needed to create a realistic, physics-based scene. Several of these parameters don't have a parallel in [PS] or [DS] therefore it's beneficial to become familiar with the light properties as defined in Reality. 
</Text>
        </Document>
        <Document ID="126">
            <Title>ACSELproductName</Title>
        </Document>
        <Document ID="215">
            <Title>RUG_Car2</Title>
        </Document>
        <Document ID="118">
            <Title>Creating soft shadows with Reality</Title>
            <Text>The sharpness or softness of the shadows is not based on the brightness of the light but on its **size**. For example, the Sun is a very small light source in reference to people and even buildings. Of course we know that the Sun is several times the size of the Earth, but because of the distance it appears as a point in the sky. During a bright sunny day shadows are sharp. If you were to create a [PS] or [DS] scene and decided to set the sun with soft shadows, while visibly showing an outdoor, sunny day, that scene would look unrealistic. People might not know immediately what the problem was, but they would perceive that something was not quite right.
 
During an overcast day, shadows are very faint, to the point of not being visible. That is because the layer of clouds between the Earth and the Sun diffuses the light and acts as a light source; a huge, all-covering, light source. Large light sources create soft shadows. The larger the light, the softer the shadow. If you want to create soft shadows in your Reality scene stay away from sunlight and spotlights and use a [ML], &lt;!-- \index{[ML]} --&gt; which is included in the Reality add-ons. Any polygonal mesh can be turned into a mesh light but simple planes are usually the best option because  they only have one face. When using a mesh light each face/polygon is a light source and each light source will add more time to your render. Unless you need very special shapes for the light source, the [ML]  add-on will work perfectly.

If you need to use the Sun &lt;!-- \index{Sun} --&gt;and want to have softer shadows, like during an overcast day, you can simulate that situation in Reality. Contrary to what many believe, "dimming" the sun doesn't give soft shadows. Remember, the brightness of a light doesn't determine the sharpness of the shadows, the size does.

So, if we want to soften the light of the Sun we need to diffuse it, to convert it from being a small light source to be a much larger one. This can be done with a diffuser, which is a just a large plane placed between the Sun and the subject. We can use a plane primitive from the host or the included Reality Simple Plane prop. Here is how it's done:
 
- Add the Simple Plane prop to the scene. That is our diffuser.
- Place diffuser between the Sun and your subject and scale it to be around two meters (6.5 feet).
- Switch to Reality and select the material of the diffuser in the Material Editor.
- Right click and convert the material to be Matte.
- Enable the checkbox to make it translucent.
- Adjust the alpha (transparency) to add a little more transparency to the diffuser so that a little more light passes through. Don't overuse this, you just need a little transparency. The default Alpha is set to 1.0, which means that the material is completely opaque. A lower setting will allow more of light to pass through the diffuser, and vice versa. A good starting point would be 0.6, or 60% opaque (40% transparent).

This little trick, which is used every day in Hollywood productions, will give you soft light and soft shadows while using the Sun.

### Indirect lighting is always on ###

Light, in real life, bounces off objects and "touches" surrounding objects, picking up colors and other characteristics. For example, light hitting a metal surface will be reflected quite strongly and will light nearby objects. This is called indirect lighting. In LuxRender indirect lighting is always active and so your scene will require generally fewer lights than when using [hrenderer].</Text>
        </Document>
        <Document ID="207">
            <Title>RUG_Modifiers</Title>
        </Document>
        <Document ID="143">
            <Title>Camera control </Title>
            <Text>The Camera tab is used to control the use of the camera, including the use of DOF (Depth Of Field), the exposure controls, and the Film Response. &lt;!-- \index{Exposure} --&gt;

## Selecting the rendering camera ##

Reality will use whatever camera is active for rendering. If you prefer to use a particular camera for rendering, regardless of what is selected in the host, simply click on the name of the camera in the Reality Camera Editor and Reality will remember your choice.

## Shallow Depth Of Field ##
&lt;!-- \index{DOF} --&gt;
You can get beautifully shallow depth of field with LuxRender. Reality makes this operation as easy as point-and-click:

- Set the focus length ( this is not the focal length ) in the host.
- Once in Reality, click on the Camera tab.
- Check the "Enable DOF" box.
- Select an f/stop (lower values make the out of focus part blurrier).

Now, when you render the scene, the objects closer or further away from the focal point will be increasingly blurred, like the effect of using a 35mm camera in similar conditions. 
</Text>
        </Document>
        <Document ID="135">
            <Title>MatEditor</Title>
        </Document>
        <Document ID="224">
            <Title>Renderer</Title>
            <Text># "Renderer options"

In this section we configure where LuxRender is installed. Reality comes with LuxRender pre-installed and there is really nothing to do about it. In this pane you can see the full path where LuxRender is installed, in case you need to start it manually.
 
**Max threads.** The threads setting determines how many parallel processes are used by LuxRender to render. It must be no higher of the total number of cores present in your machine. Reality sets it automatically to the highest number available. You can lower that number to give more CPU power to other tasks.

**Log detail level.** This option sets how detailed will be the list of messages visible in the Log tab of LuxRender. By default Reality sets LuxRender to only show warnings and errors. We can set this option to show more detailed information. Here is the values that can be used:

- Warning only. This is the default value and only shows warning and errors. Information messages about the normal activity of LuxRender are not shown.
- Information. This option shows detailed information about the activity of LuxRender, like the loading of textures and the writing of image files to disk. This used to be the default in previous versions of Reality.
- Debug information. This option provides the highest level of detail and it's useful when trying to find the source of some bug or other unusual behavior of LuxRender.
- Errors only. This option is the least detailed and will show a message only if it's about a critical error. Warning messages will not be shown.
</Text>
        </Document>
        <Document ID="240">
            <Title>MeshLight_with_imagemap</Title>
        </Document>
        <Document ID="127">
            <Title>ACSELShare</Title>
        </Document>
        <Document ID="78">
            <Title>Color Temperature</Title>
            <Text>Color temperature controls the spectrum shift of each light. Natural light has a color that is determined by the source. For example, incandescent light bulbs have a more yellow color than neon tubes or sunlight. The sun shifts color temperature during the day, being more yellow/orange during sunrise and sundown and being more blueish during the day. These shifts of tints are defined as "color temperatures" and are measured in [Kelvin degrees](http://en.wikipedia.org/wiki/Color_temperature). The following table gives a few reference values:

| Light type      | Kelvin value              |
|-----------------|---------------------------|
| Candle flame    | 1930                      |
| Common Tungsten bulb | 2,500-2,900          |
| Sunrise/Sunset  |  3,000                    |
|Quartz Light     | 3,200                     |
| Fluorescent     |  3,200-7,500 (cool white) |
| Daylight        | 5,500-6,500               |
[Light color temperatures]

Paradoxically, lower Kelvin numbers indicated hotter lights and higher Kelvin numbers indicate cooler lights.
</Text>
        </Document>
        <Document ID="216">
            <Title>RUG_car_with_planes</Title>
        </Document>
        <Document ID="119">
            <Title>Changing multiple materials </Title>
            <Text>Reality allows you to quickly change multiple materials with a single action. If you need to change the type of multiple materials at once do as follows:

- Select all the materials that you want to change, even across multiple objects
- With the selection active right-click on any selected material
- Select the new type of material that you want to assign

All selected materials will be changed to this new type. If you edited one material and you want to  apply those changes to a set of similar materials:

- Select the source material you've changed.
- Select **Copy** from the application's menu.
- Select all the target materials.
- Select **Paste** from the application's menu 

All the settings from the source material will be copied to the targets except for the textures. This allows you, for example, to copy the skin &lt;!-- \index{Material!Skin} --&gt;settings from V4's torso to V4's limbs without losing the textures in the target materials.
If you also need to apply the textures, use the **Paste with texture** option instead.

If you want to change a texture in multiple materials, for example, convert an Image Map texture in the Diffuse channel to a Texture Combine texture, then use the following procedure:

- Select all the materials that you want to affect
- Alt/Opt-Click the texture preview for the Diffuse channel
- In the Texture Editor select Texture Combine for the new type of texture

You can see this operation in action in this video:

[#](https://www.youtube.com/watch?v=aSY-YW1RVj0)
</Text>
        </Document>
        <Document ID="208">
            <Title>Fireflies and render noise [Fireflies]</Title>
            <Text>As we have seen before, LuxRender renders the whole scene in a single pass and then it refines the result as it computes more samples per pixel. The "grain" that we see on screen, while the image is still unfinished, is called **render noise**.

Render noise is gradually removed as the scene renders. The time needed to achieve this is depending on many factors, including:

- Number of CPU cores and their speed
- Size of the image
- Number of light or light sources in the scene
- Amount of glossiness in reflective surfaces

Sometimes we see the term "fireflies" used to indicate render noise. That is not correct. Fireflies are mostly a thing of the past and they don't happen today with LuxRender, except in the most extreme cases. Fireflies are not render noise. Instead they are large "specks" of white pixels, much larger than render noise, and they don't get resolved over time. In fact they tend to become more pronounced as the render continues.

</Text>
        </Document>
        <Document ID="144">
            <Title>Exposure controls </Title>
            <Text>The Camera Editor allows you to set the exposure controls for each camera. These controls are the same that are found on a standard photo camera: ISO speed, shutter speed and aperture (f-stop). &lt;!-- \index{Exposure} --&gt;

If you render animations it is important that the exposure is kept consistent throughout the animation. To do so use the following workflow:

- Render one test frame of your animation and set the exposure in LuxRender. 
- Copy the values to Reality
- Render the whole animation. The exposure will be set for each rendered frame and the sequence will render correctly.

##Film Response
&lt;!-- \index{Film response} --&gt;
This feature allows you to use one of the many film emulations of LuxRender. Film response profiles are descriptions of the way several real film stocks react to light and color. 

For example, the Kodachrome series of films have been used in the past by photographers to achieve a certain look because of the very specific color response of that film. Reality provides access to the whole set of LuxRender film response with descriptions that match the manufacturers' products.

Some Film response names have the "B&amp;W" suffix to indicate that its an emulation of "Black and White" film. Some names have the "Color Rev." suffix to indicate diapositives or film for "slides." This is called "color reversal" film because the final result is expected to be projected and not printed on paper.</Text>
        </Document>
        <Document ID="79">
            <Title>Image Based Lighting (IBL)</Title>
            <Text>&lt;!-- \index{IBL} --&gt;
Reality provides a great IBL system that supports full HDR (High-Dynamic Range) images both in HDR (.hdr) and OpenEXR (.exr) format. With IBL you can create incredibly realistic renders in which your 3D objects are bathed by light that is coming from all directions, just like in the real world.

IBL in LuxRender uses one single image to generate both the light and the background. This means that, with the right type of image, you can create spectacular backgrounds for your scene with the same image used to generate the lighting. 

###Background preview in the host
Since the IBL provides the background for the scene it's necessary to be able to position that background correctly in order to find the right portion of the IBL map to match our scene. To make this operation possible Reality provides a special prop that allows us orient the IBL map while working inside the host. This prop is called the *Reality IBL Sphere* and it can be found in the Reality props folder. 

Here is a video tutorial shows how to take advantage of the SmartIBL maps by hdrlabs.com in Reality [PS] Edition. The video features Reality 3 but it's still current:

[#](http://www.youtube.com/watch?v=PabaG_6cmdA)

Here is a video that shows the same task but with Reality [DS] Edition:

[￼](http://youtu.be/Opz4YIEtUiU)

By itself the sphere doesn't do much. It needs to have a map assigned to its Diffuse channel to work and a corresponding IBL map needs to be set in the Reality Light Editor. We don't need to worry about these details because it's possible to create presets that load the preview sphere automatically. The Reality lights folder has three of those presets. They are called **Alex Apartment**, **Chiricahua Plaza** and **Summi Pool**. Here is how to use them:

- Open the Reality Lights folder in the host.
- From the light folder of Reality double-click on the **Chiricahua Plaza** thumbnail. Figure &lt;!--\ref{ibl-demo-selectedlight.png}--&gt; shows how it appears in the Library.
- The IBL sphere is loaded in the scene with the map of a rocky area, Chiricahua Plaza in Arizona, loaded. The view from the the host's viewport is probably a bit blurry. Don't worry about that, it's the result of using a long lens with the current camera.
- Set the focal length of the current camera to 25mm and the preview will become clearer.
- Select the Reality IBL sphere in the scene and look in the Parameters tab. There should be a *Y Rotate* dial.
- Change the **Y Rotate** value and you should see the background change.
- Call Reality and click on the **Lights** tab. The IBL light is enabled and the map has been loaded automatically. That is the result of the presets included with Reality. Similar presets can be created by content creators who want to provide Reality-based products.
- If we look at the **Y rotation** field we see that it has the same rotation value set in the host. Every time we rotate the IBL Sphere the value is connected to Reality so that the preview in the viewport and the render are always matching.

In figure &lt;!--\ref{ibl_demo-viewport.png}--&gt; we can see the setup described above used to light and provide the background for the Dregon from the [PS] library. Without adding any light we can simply click **Render** in Reality and the scene will be lit by the IBL map. 

￼ "IBL light listed in the library"

￼ "IBL preset with Dregon figure"

￼ "Final render with the IBL preset"

The result is visible in figure &lt;!--\ref{ibl-demo-render.png}--&gt;.

### Smart IBL
&lt;!-- \index{sIBL} \index{Smart IBL} --&gt;
Reality has support for the SmartIBL format. SmartIBL is a special delivery system for IBL maps. The format was defined by the people at hdrlabs.com and it provides a set of images that can be used to define a great IBL environment. At hdrlabs.com we can find dozens of IBL maps professionally made that can be used to create incredibly realistic scenes with ease. Each map is delivered as a zip file that contains a directory. In the directory there are several files. One file is the high-definition HDR map that can be used in the Reality input for IBL. Another map is suitable for the *Preview Sphere*. Lastly, the gamma correction for the IBL map is also defined by the SmartIBL specification. 

The above video tutorials show how to take advantage of SmartIBL


**IMPORTANT, for [PS] users:** If you switch camera you might not see the IBL Preview Sphere. This is a consequence of [PS] setting the YON value for each cameras too low to see objects at large a distance. The IBL Preview Sphere is very large. When you add it to your scene Reality automatically adjusts the YON value of the current camera but it doesn't change the value for other cameras. To do that simply select the camera that is active and the set the YON parameter to a large value. Depending on the unit of measure that you use for the scene that value can be:

- 1,000 Poser Native Units
- 2621 meters
- 8600 feet

Please note that the Preview Sphere is not exported to LuxRender. It doesn't need to. LuxRender projects the IBL map by itself. The Preview Sphere is simply a prop that is used to allow us to set the right camera angle in the scene. 

###Which IBL layout?
In addition to the format used to encode an IBL file (HDR, EXR, Tiff, etc) an IBL map can be created in two different layouts:

- LatLong, from "Latitude" and "Longitude." This layout works best with Reality and LuxRender for creating backgrounds. A LatLong map looks like a world projection. 
- Angular, or "Light probe."

Both formats are supported but LatLong is generally the best choice.

###Using images with IBL: HDR vs. LDR
When using IBL, you will need to provide an image of some kind. One characteristic of images is whether or not they provide high ranges of light information. HDR (High Dynamic Range) refers to the ability of an image to provide a high amount of light information, higher than conventional photographs, and closer to the range perceived by the human eye. LDR (Low Dynamic Range) refers to the limited range of light information handled by conventional photographs.

The human eye can detect a wide range of light with finesse, and this "HDR" ability becomes part of our experience with the real world. In contrast, film and digital cameras can only capture a small subset of light (in the low to medium ranges), resulting in LDR images. For example, if you want to take a picture of a friend facing you in a room, with her back to a bright window, your camera will be unable to take a good picture. You will either need to expose the image to have your friend's face well lit, which will overexpose the window behind her, or, you can expose for the bright window but then the face will be just a dark oval. This problem demonstrates the limitations of cameras.

When implementing IBL, we can use LDR images, but the result will be a very low-contrast type of lighting. In that case we can improve your render by adding one or more lights positioned to reflect the light into dark areas of the scene.
The ideal solution is to use HDR images for IBL. Photographers create HDR images by taking multiple exposures of the same image and then combining all those exposures inside a single file that contains light information that a program like LuxRender can use. 

###IBL without images
You probably noticed that there is a color control in the IBL editor. We can use that color to add a tint to the picture, in case you want to shift the tone of it. Or, we can use it by itself without any picture.  If we have a picture the color will be combined, multiplied, with the picture. If we don't use any picture you will still get an excellent even lighting of the whole scene with the selected color. This can be an great way of adding some dim, blueish light to a night scene lit by a spot to simulate the moon. There are many other uses. Experiment with this to find creative ways of adding diffuse light to your scenes. 

</Text>
        </Document>
        <Document ID="136">
            <Title>MaterialSelection</Title>
        </Document>
        <Document ID="225">
            <Title>Renderer_group</Title>
        </Document>
        <Document ID="128">
            <Title>CameraOptions</Title>
        </Document>
        <Document ID="233">
            <Title>Reality_lights</Title>
        </Document>
        <Document ID="152">
            <Title>Tonemapping</Title>
            <Text>After you play with LuxRender a little bit you will notice some controls in the main render window. The topmost is called *Tonemapping.* &lt;!--\index{Tonemapper}--&gt; Tonemapping is very important in making things work the way you want, and in achieving the look that you desire. 

# "The tonemapper selector in LuxRender"

Unlike [hrenderer] and many other renderers, LuxRender calculates the light values using full light spectral values. This means that when it calculates the light amount for a given pixel LuxRender has the real value and not some number that has been clamped down to stay in the RGB limits of what our monitors can show. Light in the real world has wavelengths that go beyond what the human eye can see. Photographic film has a more limited ability to capture light values than what our eyes can see. Computer monitors have an even more limited range of light values that they can display. 

If LuxRender was going to render a light value that was based on what your monitor can "see" then the fidelity of the information would be seriously compromised. Instead, LuxRender uses the full spectrum of light, and the tonemapper uses an algorithm to convert those internal light values to what we can see on the computer. As it turns out there are a few different tonemapping possibilities, but for Reality we will focus on just two: AutoLinear and Linear.

## AutoLinear ##
&lt;!-- \index{Tonemapper!Autolinear} --&gt;
Think of your scene as something that you can capture with a photographic camera. As you decide which [hrenderer] camera you should use you have two choices: point-and-shoot "all automatic," or state-of-the-art DSLR (Digital Single-Lens Reflex) with full manual control. 

Point-and-shoot cameras nowadays are pretty good and deliver nice pictures. You point the camera at the scene, click the button, and you get a nice picture that is correctly exposed, in focus, and with good colors. However, if you tried to take a picture of somebody in front of a window you know that there are limitations to what those cameras can do. Nevertheless they get the job done in a very good way and without your involvement in things like shutter speed, film ISO and aperture. 

AutoLinear is your point-and-shoot camera. It works well for many situations, including scenes that have sun and spotlights, but it averages the light intensity in the scene in order to find a good balance, and consequently things are not always exposed correctly. If a light is visible in the scene, Autolinear will seriously underexpose the scene and you might even end up with a pitch black image with a bright spot, the light, in it. If that happens then it's time to switch to Linear.

## Linear ## 
&lt;!-- \index{Tonemapper!Linear} --&gt;
Linear is the best tonemapper and it gives you full control over the final aspect of the image. You can dynamically change the exposure &lt;!-- \index{Exposure} --&gt;to achieve overexposed/underexposed effects without re-rendering your scene, and the result is usually shown in a second or less. 
Linear works like a manual camera. The parameters to adjust are:

- Film ISO. This is also known as film speed. Higher values mean faster film, faster film means that the "film" is more sensitive to light. If your scene looks dark then change this parameter first and see if you gain some definition. 
- Exposure. &lt;!-- \index{Exposure} --&gt;This is equivalent to the speed of the "shutter" of a camera, and is usually expressed in a fraction of a second. 1/60, 1/125 or 1/250 of a second are normal values. For a night scene with very faint light you might want to try an exposure of 1 full second.
- f-stop. This is the aperture of the "iris" in your camera. Lower numbers mean wider aperture and more light hitting the "film." Generally each f-stop number, in increasing order, means that the lens acquires half the light than with the previous f-stop. For example, f4.0 gives us an aperture that is half of f2.8. f5.6 is half the aperture of f4.0. When we use smaller apertures we let less light pass through the lens and that gives us a darker image.

You can press the `Estimate settings` button in LuxRender to have the program quickly estimate a reasonable exposure. From there you can adjust the setting more. 

###Video tutorial

See the following video or a demonstration on how to adjust the exposure while rendering.

[￼](http://www.youtube.com/watch?v=Evw2yjC4sa4)

## Converting from AutoLinear to Linear ##

When you change a tonemapper from AutoLinear to Linear, it can sometimes seem that you have done something wrong because the image turns completely white.

￼ "Conversion to Linear without exposure adjustment"

If you look at the tonemapper parameters in figure &lt;!--\ref{linear_tm_f2_8_iso50_ss_1.png}--&gt; you'll see that we have a full exposure of 1 second and the iris wide open at f2.8. The scene that I'm trying to render is a daylight scene and if you used that kind of aperture and exposure with a real camera you would end up with something overexposed like that as well. 
So, lets first change the exposure to something more reasonable like 1/250 of a second. Even with the aperture at f2.8 we can immediately see the difference. See figure 4.8.

￼ "Reducing the shutter time"

OK, we are on the right path. Next let's change the aperture (f/stop) to something a little more appropriate. Figure &lt;!--\ref{linear_tm_f2_8_iso50.png}--&gt; shows the result.

￼ "Closing the iris"

At f8.0 we have 1/8 of the light that we were getting before and now almost everything is exposed correctly. Just for the heck of it, let's see what happens when we increase the sensitivity to 80. See figure &lt;!--\ref{linear_tm_f8_iso50.png}--&gt;.

￼ "Adjusting the film sensitivity"

That looks good. Even though a couple of spots might be a tad overexposed, we can adjust the textures to compensate for that. Figure &lt;!--\ref{linear_tm_f8_iso80.png}--&gt; shows us the result of a perfectly exposed image.
</Text>
        </Document>
        <Document ID="170">
            <Title>Registering Reality</Title>
            <Text>The first time that you run Reality the program will ask you for the registration.
This process is simple, quick, and it will take just a minute of your time. Once it's done the program will work without further requirements. 

You call Reality from inside [PS] or [DS], using the Render menu. Click on the **Render | Reality Render Editor** menu to call the program.

# "Calling Reality from [PS]"

￼ "Calling Reality from [DS]"

We have done our best to make the registration system as easy as possible. Here's how it works.

The first time that you run Reality you will be prompted to register the program. The registration requires four elements to be entered:

- Your first name
- Your last name
- Your order number
- Your serial number

Some of our distributors might call the serial number a "license code." It's the same thing. If you have purchased Reality via the Prêt-à-3D website you will need to enter the same name as reported in the email that you received after the purchase.

##Automatic Registration
The easiest way to complete the registration is to use the **Automatic** mode, which sends the registration data via Internet. Please note that there is no requirement for Reality to have an Internet connection in order to work normally. The Internet connection is just for your convenience, to make the registration simple and quick.

So, with your Internet-connected computer you can enter the four pieces of data described above plus your email address. At this point you can decide to receive notifications from Prêt-à-3D about updates for Reality or other relevant information. Please note that we don't spam our customers and we keep our mailing list strictly confidential.

The registration window is shown in &lt;!--\ref{registrationdialog.png}--&gt;.

￼ "The Registration window"

Please note that the name must appear exactly how it appears in your invoice or the registration process will fail. Rest assured that the information given is kept strictly confidential and is not shared with anybody. 

##Manual registration
If, for any reason, you cannot use a computer with an Internet connection available, then there is an alternative system for registering your copy of Reality. You need to fill out the form above as usual and then press the **Manual** button. Another page will show you the instructions on how to complete the registration manually. 

You will need to go to a web page using another computer, smartphone or tablet. The URL for the page is shown on the screen. The page provides a form to enter **exactly** the same data that you have in the registration window of Reality. Once that is done you will receive an activation code via email. Enter the activation code in the window shown in figure &lt;!--\ref{registrationdialog2.png}--&gt;.

￼ "The Manual registration window"

After that you just need to press the **Save** button and you will get a confirmation message about the registration.
If anything happens that prevents the registration from finishing successfully please send an email to `reality@preta3d.com` with a screenshot of your registration window. 

##Unregistering Reality

If, for any reason, you need to remove the registration for your copy of Reality you can do that from the Help menu. This is how it's done:

- Run Reality
- From the Help menu of the program select "Unregister Reality"
- You will be asked to confirm the operation
- If you confirm the unregistering of Reality the program will erase its registration information and then close
</Text>
        </Document>
        <Document ID="209">
            <Title>Alpha Channel</Title>
            <Text>The Alpha Channel controls the transparency of a material.  &lt;!-- \index{Alpha channel} --&gt;

The values available are:

- Opacity/Map strength. Without a texture the value indicates the level of opacity of the material. A value of 1.0 means that the material is perfectly opaque. A value of 0.0 means that it's completely transparent. If you have an Alpha Map the value works in the same way but in conjunction with the texture. The value is taken directly from the host during the conversion of the material, but it can be changed to your liking. 
- Alpha map.  A texture that defines the alpha map. White is solid and black is transparent. This value is taken from the host, if present. You can use any of the procedural textures available in the Reality texture editor.
</Text>
        </Document>
        <Document ID="234">
            <Title>Meshlight_Params</Title>
        </Document>
        <Document ID="107">
            <Title>DistopyaToMatte</Title>
        </Document>
        <Document ID="161">
            <Title>LuxRender</Title>
            <Text>Reality renders using LuxRender, a physics-based renderer. [LX] is included in Reality and it is installed automatically when installing Reality.

If you have previously installed LuxRender, as a stand-alone program, then the installation of Reality [version] will **not** affect that installation. You will be able to use that version of LuxRender with other programs, like Blender or Maya.
</Text>
        </Document>
        <Document ID="250">
            <Title>Editing Reality textures [RTE]</Title>
            <Text>Reality converts the materials from the host to its own format automatically. While this conversion is done at the best approximation that is possible by a program, there are several situations in which we need to change those materials to fit specific needs.

One area of particular interest is the editing of textures. Textures, as explained in the previous section, are patterns that are applied to a surface. Reality converts many [PS] procedural textures to the LuxRender equivalent but there are times when that conversion might need to be adjusted. Or there can be a situation in which we might want to create a new texture from scratch using the Reality Texture Editor.

Whether we want to change an existing texture or we need to create a brand new one, the Reality Texture Editor is the tool of choice for that task. The Reality Texture Editor (RTE) has been designed to be simple to use while being able to define advanced textures.

The RTE does not use nodes like in some 3D programs. Nodes are very powerful but they are also very hard to understand and use. Instead, the RTE presents each texture inside a panel that is always in the same place on the screen and that provides clear and detailed information about the texture being edited.

To learn how the Texture Editor works we will go through a few simple and practical exercise that will show us several ways of creating and modifying textures. It's gonna be fun.

Let's start.

- Create a new scene
- Add the Reality Simple Plane from the Reality Props folder
- Call Reality
- In the Materials tab select the **RealityPlane** material. The material is defined as having a simple Color texture in the Diffuse channel. See figure &lt;!--\ref{rug_tet-01.png}--&gt;.

# "The Simple Plane initial material"

In the Diffuse channel area we can see a texture named **RealityPlane.diffuse**, which is of type Color. The Texture is represented by a rectangular area called the Texture Preview. &lt;!-- \index{Texture Preview} --&gt; The type of the texture is shown in the top right of the Texture Preview. To the right of the type there is a disc that shows if the texture data is of type RGB or Numeric. The RGB data is shown as a multicolor disk. With textures of type Numeric the disc shows as a greyscale gradient.

- Click on the grey color swatch that says 204:204:204. That is the RGB value of the texture used. 
- When we click on a Texture Preview the texture is loaded in the Editor, which is in the right side of the Reality window. See figure &lt;!--\ref{rug_tet-02.png}--&gt;.

￼ "Editing a Color texture"

Alternatively we can edit a texture by clicking on the Gear Wheel and by selecting **Edit** front he menu.
In this case the RTE is prepared to edit the texture of type color that we have clicked on. From the top of the panel we can find:

- The name of the channel that holds the texture. In this case it is the Diffuse channel.
- The name of the texture: RealityPlane.diffuse.
- The type of the texture. In this case it is of type Color, which paints a surface with a solid, uniform color.
- The color swatch. Clicking on this field brings up the color picker of the Operating System (OS), which allows us to change the color used by the texture.
- The presets selector. Reality provides a series of color presets grouped by category name. By default the Skin category is selected, which shows a series of skin pigmentations. By clicking on any of those squares we can change the colors used for this texture. Other categories include Hair, Wood and Plastic.

For this exercise we are not going to change the color, we are going to completely change the texture used for the Diffuse channel. One fundamental principle of Reality is that a texture type can be changed on the fly. If we click on the **Texture type** dropdown list we can see all the kinds of textures available. If we select any of the other types then the Diffuse channel texture, which is of type Color right now, will be changed to another type. Let's select the **Image Map** type. See figure &lt;!--\ref{rug_tet-03.png}--&gt;


￼ "The Image Map editor"

Reality now shows us the editor for the Image Map texture. Please note that the name of the channel, Diffuse, and the name of the texture, RealityPlane.diffuse, have remained the same. An Image Map texture allows us to select an image on disk and use that image to paint the selected surface. An image can be in color or greyscale. The **Texture class** dropdown list controls this value. Let's leave it at **color** to indicate that we want to use the image RGB values.

The **Normal map** checkbox can be used to indicate that the image map is a Normal Map. This is only useful when creating textures for the Bump map channel. 

Continuing our examination of the editor, there is a section of the panel that is empty. That section is labelled **Image Map** and there is where we specify what image we want to use for our texture. 

- Click on the gear wheel to the right to open a menu.
- From the menu click on **Select a new file**. See figure &lt;!--\ref{rug_tet-03b.png}--&gt;
- Navigate to where you have an image file in PNG, JPEG or TIFF format. Select that file.

￼ "Selecting an image map file"

I selected the image in figure See figure &lt;!--\ref{rug_imagemap-tex.jpg}--&gt;.


￼ "Image map for the Texture Combine texture"

The preview of that file will appear under the name. Figure &lt;!--\ref{rug_tet-04.png}--&gt; shows the choice that I have made on my computer. This exercise will work best if you use a square image. Generally image maps for texturing use a square format. Below the preview of the image we can see that Reality reports the size of the image. In my case it's 1711 by 1711.

￼ "Image map texture"

We can also see that the material preview has been updated automatically to reflect the change. In the figure I have changed the Material Preview to use a plane instead of the default sphere.

At this point let's say that we want to give a nice shade of blue to the texture that we have selected. Of course we could edit the image map in Photoshop and mix some color in it but that would require us to create a new image file, change the texture etc. Not much fun and totally unnecessary. Instead let's perform the following steps:

- Click on the **Texture Type** drop down menu and select **Texture Combine**. See figure  &lt;!--\ref{rug_tet-05.png}--&gt;.
- The Texture Combine texture provides two texture slots, **Texture A** and **Texture B**. Those two textures can be mixed together via addition, subtraction or multiplication. By default **Texture B** is disabled. This is done by setting the **Function** to **None**
- The new texture retained the image map that we have selected before. This is an important feature of Reality. Whenever we change texture type the previous data is retained, if possible

￼ "The Texture Combine texture"

You can change the function for the texture to be **Multiply** if you want to enable the second texture. Just set it back to **None** before continuing with the tutorial.

First, let's notice that both **Texture A** and **Texture B** are more than simple textures. Each slot allows for a texture and a color to be mixed together. By default the color is pure white. The color for each texture is mixed via multiplication. Without getting into the mathematical details, any RGB pixel that is multiplied with pure white remains untouched. Basically, pure white is the color equivalent of the number 1 in math. Any number multiplied by one the same number. The same happens with images and pure white.

- For now we can ignore **Texture B**.
- Let's make sure that the **Function** dropdown list and select **None**.
- Let's click on the color swatch of **Texture A** and select a shade of blue. The result should be immediately visible in the Material Preview. See figure &lt;!--\ref{rug_tet-06.png}--&gt;


￼ "Mixing colors with textures"

Try rendering the image at this point. Select a low resolution, for example 800 x 800, to get a quick preview of the result.

Now, just for the fun of it, let's convert the Texture Combine texture back to the Image Map type. To do this we click on the **Texture type** dropdown list and select **Image Map**. We can see that Reality not only converted the texture but it was smart enough to retain the image map and preserve our work. This is feature of the Reality Texture Editor. Whenever it's possible to preserve the previous data it will do so.

- Let's convert the texture back to *Texture Combine*. This time we set the function to **Multiply** and we add a new texture for the mix. 
- In the **Texture B** slot click on the gear wheel and select **New Image Map**. Reality will ask you to select an image file.
- Select any image that you prefer. I suggest to find one that has only black and white values. In my case I used the the picture in figure &lt;!--\ref{rug_tet-mask.png}--&gt;


￼ "Second image used for the Texture Combine texture"

Since we selected the multiplication function in the Texture Combine node the result is that every black pixel in figure &lt;!--\ref{rug_tet-mask.png}--&gt; will be black in the resulting texture. Every white pixel in &lt;!--\ref{rug_tet-mask.png}--&gt; will be the original pixel in the texture placed in **Texture A**. 

This is because, as we mentioned before, pure white is like the "1" of colors and so every color multiplied by pure white remains unaffected. On the other hand, pure black is the zero of colors. Every color multiplied by pure black is black.

The result of this texture can be see in the Material preview. If we add a mesh light on top, frame the shot and render it we obtain the result shown in figure &lt;!--\ref{rug_tet-07.png}--&gt;.

￼ "Result of the Texture Combine texture"

As with numeric multiplication the order of the textures does not matter.

##Advanced texture editing

Now that we understand how the RTE works, it's time to look at some more advanced ways of creating textures. In the previous example we used a pre-made image map to overlay a mask, also known as a "matte," to a portrait. But what if we want to use one of the procedural textures to create some sort of effect? Would it be possible, for example, to overlay a noise map on the image? The answer is yes and the following tutorial shows how it can be done:

- Let's go back to the RealityPlane material and click on the Diffuse texture.
- In the RTE we should have a Texture Combine texture with an Image Map in the **Texture A** slot
- Let's click on the *Texture B* slot to change the texture type.
- From the the Texture Type dropdown list we select Mix

The reason to use Mix is to have access to the procedural textures inside a color texture. All the procedurals, Clouds, Fractal Noise, Wood and others, generate numeric textures. 

A numeric texture is a texture that has values that go from 0.0 to 1.0 instead of RGB values. So, how can we use the numeric values to generate colors? That's where the Mix texture comes in handy. The Mix texture provides two slots which can themselves be any of the LuxRender textures. If we use the Color texture for each slot we can then have a Mix texture that mixes between two colors. Let's say that the first color is black and the second color is white. 

Now we have a Mix texture that can mix between black and white. What we need at this point is to determine is how the mixing is done. The Mix texture accepts a third texture that is a numeric texture that can specify, for each pixel in the mix, which slot should be used. A value of zero (0.0) selects the texture in the first slot of the mix. A value of one (1.0) selects the texture in the second slot. An intermediate value mixes the two textures proportionally. For example, a value of 0.1 will have 10% of the second texture and 90% of the first one.

Let's see it in action:

- In the Texture A of the Mix texture make sure that we have a Color texture and that it's set to pure black.
- In the Texture B of the Mix texture make sure that we have a Color texture and that it's set to pure white.
- See figure &lt;!--\ref{rug_tet-10.png}--&gt; for verification.
- Click on the Gear Wheel of the Mixer texture and select **New | Clouds**. Clouds is a numeric texture that generates a noise pattern with values that go from 0.0 to 1.0.
- Edit the Clouds texture by clicking on its texture preview.
- Set the Cloud texture to use the following parameters:
	- Noise pattern: Crackle
	- Hard
	- Noise size: 0.3
	- Noise depth: 0
	- Brightness: 1.2
	- Contrast: 1.4
	- Scale: 10%
- Check figure &lt;!--\ref{rug_tet-08.png}--&gt; to verify the parameters.

￼ "Configuration of the Mixer texture"

￼ "Cloud texture parameters"

The procedural Clouds texture gives us a nice cracked surface. Now this texture becomes the selector of black and white from the Mix texture. The Mix texture, in turn, is the second texture of the texture used for the Diffuse channel. The result can be seen in figure &lt;!--\ref{rug_tet-09.png}--&gt;.

￼ "Mixing an image map with a procedure texture"

This shows how powerful the Reality Texture Editor is. With the RTE we get the same expressive flexibility of a node system but with a simpler approach. The ability to switch to a different texture type, while retaining key data, makes it also a very productive system.</Text>
        </Document>
        <Document ID="70">
            <Title>cube_light</Title>
        </Document>
        <Document ID="71">
            <Title>ghost_racer_nr</Title>
        </Document>
        <Document ID="241">
            <Title>Light_alpha_demo</Title>
        </Document>
        <Document ID="162">
            <Title>Requirements</Title>
            <Text>To use Reality with [PS] you need one of the following configurations:

###[PS]

- [PS] 9 with Service Release 3 (SR3) installed
- [PS] Pro 2012 with SR3 installed
- [PS] 10 with SR3 or higher installed
- [PS] Pro 2014 with SR3 or higher installed

If you need to add one of the Service Release updates please go to the [SMI] website and download that update. Without the   Service Releases listed above Reality cannot run. 

###[DS]
To use Reality with [DS] you need one of the following configurations:

- [DS] [DS version] or higher
</Text>
        </Document>
        <Document ID="171">
            <Title>RegistrationDialog</Title>
        </Document>
        <Document ID="137">
            <Title>MatteTranslucent</Title>
        </Document>
        <Document ID="260">
            <Title>Export only</Title>
            <Text>Sometimes we might want to create the LuxRender scene files without launching the renderer. In those cases we can enable the *Export only* checkbox and Reality will do exactly that. The scene files will be created as usual but LuxRender will not be started. We can then start LuxRender manually and use the *File | Open*  menu option to open the `.lxs` file and start the rendering process.
</Text>
        </Document>
        <Document ID="251">
            <Title>sIBL License</Title>
            <Text>&lt;!-- \index{sIBL} --&gt;
    +------------------------------------------------------+
       _____                      _     _____ ____  _      
      / ____|                    | |   |_   _|  _ \| |     
     | (___  _ __ ___   __ _ _ __| |_    | | | |_) | |     
      \___ \| '_ ` _ \ / _` | '__| __|   | | |  _ &lt;| |     
      ____) | | | | | | (_| | |  | |_   _| |_| |_) | |____ 
     |_____/|_| |_| |_|\__,_|_|   \__| |_____|____/|______|
                             
             _____ _______ _______ __   _ _______ _______
      |        |   |       |______ | \  | |______ |______
      |_____ __|__ |_____  |______ |  \_| ______| |______
                                                        
    +------------------------------------------------------+
    
     These sIBL-sets and all images therein are licensed 
     under the Creative Commons Attribution 3.0 License.
    
     You are free:
      - to Share: to copy, distribute and transmit the work
      - to Remix: to adapt the work
    
     Under the following condition:
      - Attribution: You must attribute the work as 
        "Lit using Smart IBL from HDRLabs.com/sibl".
    
     Further license details here: 
         http://creativecommons.org/licenses/by/3.0/
    
    +------------------------------------------------------+
    
     We are actively looking for volunteer developers, who
     have the time and abilities to adapt the Smart IBL 
     plugins to Blender, Houdini, Rhino... Join the club!
    
    +------------------------------------------------------+
    
              Get more sIBL sets like these at:
              www.hdrlabs.com/sibl/archive.html
    
    +------------------------------------------------------+
    
     If you want to learn how to shoot your own HDRI panos
                   you should get my book:
    
                    www.hdri-handbook.com
    
    
    
              Christian Bloch
              www.HDRLabs.com</Text>
        </Document>
        <Document ID="153">
            <Title>linear_tm_f2_8_iso50_ss_1</Title>
        </Document>
        <Document ID="218">
            <Title>What to do if [PS] objects are missing</Title>
            <Text>There is a bug in [PS] version 9/Pro 2012 that causes broken links to objects in Reality. This happens when some parenting or un-parenting is done in [PS]. 

The issue manifests itself as missing objects in the image rendered with LuxRender. To remedy this Reality has a "Rescan Scene" button. If you see missing items in the LuxRender render then close LuxRender and click on that button in Reality. The scene will be re-scanned and the missing 3D assets will be found. 

This operation is safe and can be performed any time you want. If you do any parenting or un-parenting of objects in Poser remember to click on the Rescan Scene  button.

**This bug has been resolved with [PS] 10/Pro 2014.**
</Text>
        </Document>
        <Document ID="243">
            <Title>GPU-based Rendering</Title>
            <Text>Reality can use the GPU to accelerate rendering. While this is a great feature, it's important to understand that there are limitations to what it can do.

# "Scene Configuration options"

There are two types of GPU acceleration that can be used: OpenCL and OpenCL with Extra Boost. &lt;!-- \index{OpenCL} --&gt; 

Simple OpenCL acceleration allows you to use every OpenCL device in your machine, whether that is a GPU or a CPU. You can enable or disable any OpenCL device when using this option.

For example, you might want to to use of the GPU and leave the CPU available so that you can have a very responsive user interface while rendering.

The OpenCL rendering, without the Extra Boost option is very flexible and will produce always unbiased results.

When enabling the Extra Boost option the CPU is automatically deselected because he cannot participate in this kind of rendering. So please make sure that you don't enable it manually. Doing so will crash LuxRender.

The Extra Boost option can provide faster results at the price over slight lowering of quality of the overall image. This option can potentially introduce bias in the result.

GPU-based rendering also suffers from limited RAM. GPUs generally have small amounts of on-board RAM, typically in the range of 2GB. On the other hand computers nowadays can have in excess of 20 or 30 GB and the CPU is able to address all that memory. For complex scenes having that amount of memory is a crucial factor.

To help contain a scene inside the GPU's RAM, Reality automatically enables  texture collection and scaling when selecting to render with OpenCL.

##Starting up
If you want to try OpenCL rendering we suggest that you start without the Extra Boost option. Gain some experience in using this mode and then experiment with the Extra Boos option.

##Shader compilation
Whenever you use OpenCL rendering the materials, a.k.a. shaders, need to be compiled before the rendering can begin. During this time LuxRender will show a black rectangle in the area where the image is expected to show.

While LuxRender is compiling the shaders it will report that there are zero devices present. The information is shown in the status bar:



Once the compilation is done the number of devices will be displayed. For example, if you enabled one GPU then LuxRender will report 1 device. If you enabled both the GPU and CPU then LuxRender will report two devices. 

Depending on  the type of hardware and the device driver installed, the compilation time could vary from a few seconds to several minutes. This compilation phase is necessary only the first time a given material is rendered. If you do successive renders, without changing any of the materials, then the rendering will start almost immediately.

It has been noticed that OpenCL with Extra Boost might take longer to compile on some nVidia hardware. We are aware of this and hope to provide a solution soon.

That is currently working in progress to make this compilation phase as a short as possible and future updates of Reality are expected to shorten this time considerably.

It is worth noting that in the case of an animation the compilation time will be needed only for the first frame, while all the other frames would be a rendered right away.

 ##OpenCL
&lt;!-- \index{OpenCL} --&gt; &lt;!-- \index{OpenGL} --&gt;
Please note that OpenCL is not related in any way to OpenGL. Please also note that OpenCL is not CUDA. OpenCL is an open standard that provides developers with an interface to use the computing power available in the GPU. OpenCL is platform-independent and so it works, and it's supported by, graphic cards from different brands, including nVidia, AMD and Intel. CUDA is a proprietary API, similar in scope to OpenCL, but only supported by nVidia.

With OpenCL you can have multiple devices, GPUs, your machine and those devices can come from different vendors, and Reality and LuxRender will be able to use them at the same time.

####Important notes for OS X users
While Reality provides full support for OpenCL on both OS X and Windows, unfortunately the OpenCL drivers for OS X 10.10 and 10.11, up to September 2015, are broken. This means that it's not possible to render using OpenCL on OS X.

If and when Apple will fix its OpenCL drivers, then Reality will automatically be able to render your images with OpenCL.
</Text>
        </Document>
        <Document ID="49">
            <Title>LightEditor3</Title>
        </Document>
        <Document ID="163">
            <Title>How to contact us</Title>
            <Text>If you need customer or technical support for Reality you can reach us via email using `reality@preta3d.com`

Our [website](http://preta3d.com) is constantly updated with news and information about Reality and LuxRender.

There is a very active online community of Reality users that can also help you with common tricks and techniques that have been developed over the years. The official Reality forums are found at:

[http://forum.runtimedna.com/forumdisplay.php?303-REALITY-3-Official-Forums](http://forum.runtimedna.com/forumdisplay.php?303-REALITY-3-Official-Forums)

You can follow all the latest news and developments about Reality through the main social networks:

- [Facebook](http://www.facebook.com/RealityPlugIn)
- [Pinterest](http://pinterest.com/preta3d/boards/)
- [Twitter](http://twitter.com/preta3d)
- [Google+](https://plus.google.com/106625816153304163119)

</Text>
        </Document>
        <Document ID="219">
            <Title>Output_group</Title>
        </Document>
        <Document ID="242">
            <Title>Sub-Surface Scattering (SSS)</Title>
            <Text>Sub-Surface Scattering, or SSS, is the ability of a renderer to simulate the scattering of light happening in the layers of human tissue under the surface of the skin. SSS is used for several types of materials, but skin is its most popular application. &lt;!-- \index{SSS} --&gt;

Reality has a feature called "zero-click SSS" which assigns a *Skin* material, with SSS enabled, automatically to certain materials that are found in the the host's figure. For example, the material **1_SkinFace** of Victoria 4 is automatically turned to skin with SSS, regardless of what material properties were set in the host. Figure &lt;!--\ref{reality-sss.png}--&gt; shows the Skin material for the face of Victoria 6. The SSS checkbox is enabled and we can see the settings for the scattering and other parameters involved in the rendering of the SSS feature. &lt;!-- \index{V6} --&gt;


# "SSS settings"

###Customizing the SSS
While setting the SSS for a material is, most of the times, automatic, the specific values for the SSS parameters might need to be changed in order to fit a specific skin or situation. The following sections describe all the parameters that can be edited.

####Connected Volumes
SSS is implemented in Reality by using the Homogeneous Volumes of LuxRender. &lt;!-- \index{Volumes} --&gt;
A volume, in LuxRender, is a body that has a substance similar to fog. Basically a volume is made of particles that scatter the light. The density and color of the volume determine how strong the scattering effect is. When we create a material that has SSS, Reality creates automatically the inner volume for the material. A volume has a name and a series of parameters. The name for the volume is created automatically by using the internal name of the figure, followed by a ":" followed by the string *SSSVol*. So, for example, if we add the first figure to the scene, the volume for the SSS will be called *Figure 1:SSSVol*. *Figure 1* is an internal name assigned automatically by [PS]. For [DS] it's generally something like *GenesisFemale_21556-30608:SSVol*, where GenesisFemale_21556-30608 is the internal name assigns to the figure. Internal names change with each figure.

While the volume is created and named automatically, we have access to its characteristics and we can change a number of parameters. The **Surface color** and **Interior color** parameters of the SSS panel are actually entries in the **Absorption Color** and **Scattering Color** parameters of the associated volume. We can see all the parameters for the SSS volume by clicking on the **Volumes** tab at the top of the Reality window, between the **Camera** and **Advanced** tab. See [Volumes](#Volumes) for more details on how to adjust the volume parameters.

The role of the Surface Color is to provide the tint of the surface of the scattering volume. The Interior Color is an additional hue that is given to the scattering particles. The colors that are selected by Reality have been tested to provide very credible SSS for all kinds of skins. Since the effect of scattering, in real life, is given by the blood inside the human skin, the values used by default by Reality work for skins of many different pigmentations. Having said so, it might be necessary to adjust those colors a little bit when using certain skin packages. The scale parameters are direct inputs in the corresponding values in the volume. See the Volumes documentation.

The **Surface Thickness** &lt;!-- \index{Surface thickness} --&gt; is the thickness of the skin.

###The Hair mask
&lt;!-- \index{Hair mask} --&gt;
The SSS effect tends to make the surface of the material translucent. Most figures for [PS] and [DS] are designed with one single material for the whole face. This means that facial hair, eyebrows, beards and mustaches are affected by the SSS settings and can become unrealistically translucent. For this reason Reality automatically creates a mask to exclude the facial hair from being affected by SSS. This mask is called the Hair Mask and it's usually configured only for the face material.

The hair mask is automatically obtained from the texture used in the Diffuse channel. That texture is used in input and then internally transformed to be a high-contrast black-and-white image. While Reality does its best to guess the right transformation it can be that with certain skins, especially darker complexions, the result is not completely satisfactory. The goal of the mask is to be as white as possible except for the areas where hair is present. With female characters this means the eyebrows. Reality provides a preview of the resulting mask. If more parts of the skin are dark try gradually increasing the Gain value for the face mask until most of the face detail is lost except for the eyebrows.

###Disabling SSS
To disable the SSS effect simply uncheck the SSS checkbox. This will save substantial time in rendering the character. Disabling the SSS is advised if the character affected is not predominant in the camera view. Characters that are in the background or not close to the camera will not show much benefit from using SSS so there is no point in spending rendering cycles there.
</Text>
        </Document>
        <Document ID="129">
            <Title>Distopya_block</Title>
        </Document>
        <Document ID="138">
            <Title>OutputTab</Title>
        </Document>
        <Document ID="253">
            <Title>Removing a texture</Title>
            <Text>There are times when we want to remove a texture from a channel. Maybe the texture was converted from the host in an unexpected way or we might simply have a different idea of what's needed in that place. 

To remove a texture from a channel simply click on the gear wheel and select **Detach**. This option allows us to unlink a channel from an existing texture. The option is not always available for every channel. If you see it greyed-out it means that the channel doesn't support the unlinking of textures. 

Detaching is not a delete operation. A texture might be used by several channels or even as the input for another texture. Reality allows you to connect one texture to multiple channels. If the unlinking option deleted the texture then the consequences could be quite drastic. 

Detaching simply disconnects the texture from a channel or another texture. The Reality Texture Editor keeps track of the texture usage and if it finds that the texture is not used anywhere else, after detaching it, it will also delete it.</Text>
        </Document>
        <Document ID="228">
            <Title>Light visibility</Title>
            <Text>Photographers use lighting for creating their artistic vision. There are many, very creative uses of light and professional photographers often buy all sort of light fixtures to express themselves. What they cannot do is to hide a light if it's in the frame. That's the reality of the physical world. 

LuxRender is a physics-based renderer and that means that it recreates, as faithfully as possible, what happens in the real world. That means that lights are visible. The trick of having invisible lights is a necessity for biased renderers. With those programs it is often necessary to use invisible lights for simulating indirect light or other properties of physical light. 

In LuxRender we don't need that kind of subterfuge, indirect light is always available. There is no reason for a light to be in the frame if we don't want to see it there. If the light should not appear in the frame then there is a very simple solution: move it outside the frame.

Having said so please note that when we use [MLs] we can actually place a light and not see it, as long as the light is not facing the camera. This is because Reality does not export the back of the light. Only the light-emitting plane is exported. The back of the light-emitting plane is not visible in the render so the light source is completely invisible. </Text>
        </Document>
        <Document ID="181">
            <Title>Careful with those light sets</Title>
            <Text>While Reality can easily convert any [PS] or [DS] light set it is important to understand why you should avoid using light sets made for such programs.

The lighting model of the [hrenderer] renderers and the one used by LuxRender are very, very different and use completely different approaches. In [PS] a typical light set from the library can use an IBL light in conjunction with a few [ILs]. [ILs] are almost never used in LuxRender. One single [IL] can cause severe over-lighting; two are a recipe for disaster. 

This is because in LuxRender indirect lighting is always present and there is no need to simulate it with infinite lights.

So, while you can use the [PS] or [DS] light sets, chances are that the result will not be pleasant. Here is a simple recipe to convert a light set to something that can work for you:

- Remove every [IL]
- If the set contains an IBL light then keep it
- Replace every spot with small mesh lights
- Possibly replace every point light with mesh lights as well

In general you will find out that you will get better results and faster renders with a lighting setup that is designed for LuxRender. 

Using the Reality [ML] gives you the best results. </Text>
        </Document>
        <Document ID="270">
            <Title>Quick-start for [DS] artists</Title>
            <Text>When using a new program we are always eager to see what it can do, without spending time reading long documentation. 
If you want to start rendering great scene with almost no setup, then download the "Perfect Shot Scene" from our website ( http://preta3d.com/pre-made-scenes/ ) and use it as the start of any new scene. It contains a very flattering and realistic light setup, background and floor, and the camera exposure is set to work right out of the box. Just add your character and click on **Render**.


Follow the following steps to get a sample of how to use Reality and obtain your first great render with LuxRender.

Here is a video that shows how to get started with Reality:

[#](https://www.youtube.com/watch?v=Xz-BuON0UEo)

You can follow this workflow to create your first scene with Reality:

- Create a simple scene in [DS] with one character posed.
- Add the Reality Top Mesh Light to the scene.
- Make sure that you don't use any [ILs]
- In the Lights tab of Reality disable all lights except for the Mesh Light.
- From the [DS] menu select **Render | Reality Render Editor** The Reality program will be launched. Reality is a stand-alone program which communicates with [DS]. You can leave Reality running and switch back to [DS] to continue editing your scene. At any time you can switch back to Reality using the OS task switcher or by clicking on the Render menu option again. If Reality is already running the menu action will bring the program to the foreground.

- **Make sure that you don't use OpenCL acceleration**, start with the default of CPU-Accelerated.
- **Important:** do not enter any value in the **Max Samples** field. That is only for animation purpose. Leave it at zero.
- Click on the Render tab and click on the **Render Frame** button.
- Watch as your scene is rendered by LuxRender. **LuxRender does not stop automatically;** it continuously refines the image until you decide to stop it. When you decide that the quality of the image is satisfactory you simply close LuxRender. The image will be saved in the location specified in the Output options, in the Render tab. By default the image is rendered to a file called `reality_scene.png` which is saved in your Documents folder.
	
Now that you have done your first render you can explore all the other great features offered by Reality.

</Text>
        </Document>
        <Document ID="108">
            <Title>When is the right time to stop LuxRender? </Title>
            <Text>
Given that LuxRender doesn't stop automatically at an arbitrary point, you might wonder when it is the right time to stop the render. The short answer is "when it's good enough for you." Until you gain more practice with LuxRender it's impossible to give an answer to what is the acceptable level of quality, expressed in time. Each pass in the rendering process doesn't just refine the "grain" of the image but it adds quality to the light that is simulated. For example, glass reflections will look more realistic, and subtle sheens in the materials will catch elements from the surrounding objects. </Text>
        </Document>
        <Document ID="148">
            <Title>Render options</Title>
        </Document>
        <Document ID="139">
            <Title>SaveForACSEL</Title>
        </Document>
        <Document ID="252">
            <Title>Reclaiming disk space</Title>
            <Text>After you run LuxRender for a while  you will see that several `.flm` files are created. Those files are used by LuxRender to resume the render. If you don't need to resume the render from where it stopped you can delete those files and reclaim some disk space. `Flm` files can be actually quite large, ranging from 20Mb to 80 or more than 100 Mb each. 

To find the `flm` file use your OS file search utility and then delete them. </Text>
        </Document>
        <Document ID="165">
            <Title>Converting materials</Title>
            <Text>Reality does its best to guess what material type to use for each host material of the host, but the truth of the matter is that sometimes there is simply not enough information in the host shader to make a precise guess. That's why machines cannot make art; the human touch is still, fortunately, necessary.

There are many situations where it is necessary to convert a material from one type to another. For example, a model might include windows and their material should be Glass. Since neither [PS] nor [DS] have a glass material Reality cannot know that that would be the right selection and it will probably select Glossy as the type for that material.

To convert a material from one type to another simply select the material name, right-click and select the new type from the menu.

# "Converting Materials"

</Text>
        </Document>
        <Document ID="254">
            <Title>Using a texture multiple times</Title>
            <Text>There might be times when we want to use the same texture in multiple places. Ideally we would not want  to create a duplicate and waste memory. That's where the **Use existing** option of the gear menu comes in handy. 

For example, after we define a bump map texture we might want to use the same texture for the displacement. Since both channels use the same type of input that is a very legitimate action. 
After we define the texture in the bump map we can click on the gear wheel of the displacement channel and select *Use existing.* This action opens the window that shows all the textures available for the selected model. See figure &lt;!--\ref{rug_textureselector.png}--&gt;.

# "The texture selector"

The texture selector shows the list of textures, their type, and the channel to which they are connected. By selecting one texture we can re-use it. When a texture is connected to more than one channels it is shared. This means that editing the texture will affect all the channels that share it.</Text>
        </Document>
        <Document ID="229">
            <Title>Turning off the shadows</Title>
            <Text>Every light in the real world generates shadows. In fact shadows are a very desirable effect of using lights in photography. Some 3D renderers allow the artist to "turn off the shadows." That is something that we don't have, thankfully, with LuxRender. Lights create shadows, that is the reality of physics. Since you are reading this guide I assume that you are interested in creating realistic scenes. In the real world lights create shadows so, in order to maintain believability, LuxRender doesn't create shadow-less lights.

Shadows become softer as the light source becomes larger. If we observe the shadows during an overcast day we can see that they are almost invisible. That is because the curtain of clouds acts as a giant diffuser, an enormous light source. When the sky is covered in clouds those clouds become the light source, not the sun. That's why the shadows become so soft and faint to be barely visible. 

If you want to remove unwanted shadows from your scene then move the light source, the camera and change the size of the light until the shadows become very faint. The Reality [ML] has a *Shadowless* control to help you obtain the right effect.

The removal of shadows in 3D renderers is a feature that has been introduced to help work around one of the limitations of certain renderers. That limitation was the inability to create certain light effects, namely  indirect lighting (I.L.). To simulate I.L. many 3D artist used several Infinite Lights (aka Distant Lights) positioned strategically. They then turned off the projection of shadows from those lights. Unfortunately the "turn shadows off" has become an abused trick, as it often happens. 

Indirect light is always present with LuxRender. There is nothing we need to do about it, it's the result of physics-based lighting. We don't need any lighting hack to create it.

If the scene is set in such a way that the only way to obtain the right effect would be to turn off the shadows then that is a sign that the scene's lighting is set up in the wrong way. Rework the setup until you get the right result.</Text>
        </Document>
        <Document ID="182">
            <Title>RUG_CallingReality</Title>
        </Document>
        <Document ID="271">
            <Title>Material Sync</Title>
            <Text>There are times when we want to make a group of materials to act like a material that we have changed but we don't want to replace all the textures. For example, we might want to synchronize all the materials to use the same glossiness values and bump map of a reference material but we don't want to replace the specular map. 

In that case using the copy and paste doesn't work. Using multi-edit can do a lot but we can't change the gain of the Diffuse map for a bunch of materials with multi-edit.

Reality's Material Sync is a very flexible solution that can save you a lot of time.

For example, let's say that we have adjusted the settings for a material and you want to have a group of materials to take some of the settings from this base material but not all of them. For example, we might want to assign the same texture for the bump map and the same values of glossiness but leave all the other parameters untouched.

We cannot use multi-edit in the case because it doesn't work with the creation of textures. Textures are much more powerful and complex in Reality 4 so that option can be used. 

This is how it works:

- We select al the materials that we need to sync, included the reference material
- With all the materials selected, we right click on the reference material
- From the popup menu we select **Sync with ...** where in place of the ... there is the name of the reference material. In the following figure I right-clicked on the 3_SkinArm material:

# "Material Sync menu"


A window will be shown that allows us to select what parameters we need to update:

￼ "Material Sync window"

By enabling the **Glossiness values** we make all the materials assume the same glossiness strength of, in this case, 3_SkinArm. The same is for the bump map values and the bump map texture. If a material doesn't have a bump map texture then a new one, an exact replica of the bump map texture of 3_SkinArm, will be created for it. If  material has a bump map texture already, then that texture is deleted and replaced with a copy of the bump map texture of 3_SkinArm.

It's important to remember that the we set the reference material by right-clicking on it. 

The Material synchronization is a great time saver that makes applying changes to a batch of materials a breeze.
</Text>
        </Document>
        <Document ID="174">
            <Title>Finding the right material</Title>
            <Text>Sometime it might not be totally clear which material is which, based on the simple name. To make it easy to find a material, Reality selects the material in its list when the corresponding one is selected in the host. 

###Selecting materials with [PS]
If we enter the Material room in [PS] and use the eyedropper to select a material then that material will be automatically selected in Reality as well.

##Selecting materials with [DS]
If we select the Surface Selection Tool in [DS] and then click on a material, the same material becomes selected in Reality.

##Going the other way
Sometimes we need to verify where a certain material is in the scene. If we press the Option (Mac) or Alt (Windows) key and click on a material in Reality, then the same material is selected in the host. This works differently between [PS] and [DS] because [PS] doesn't actually have the feature of highlighting a material in the viewport. With [PS] the material is selected in the Material Room.

With [DS] the material becomes selected in the viewport and it's directly visible. 
</Text>
        </Document>
        <Document ID="263">
            <Title>Useful techniques</Title>
        </Document>
        <Document ID="261">
            <Title>Render as statue</Title>
            <Text>In some cases it is necessary to rendere a scene in neutral colors, as if all the objects were made of marble or plaster. For those times the we can use the *Render as statue* option of Reality. When this option is enabled all materials are rendered as white Matte. The materials themselves are not changed, the substitution only happens during the export phase. Here is an example of a scene rendered normally and with *Render as statue* enabled:

# "The Render as statue option at work"

As we can see in figure &lt;!--\ref{rug_render_as_statue.png}--&gt; this feature leaves the glass materials untouched, which creates excellent results where the transparency of glass is crucial for seeing the inside parts of models.
</Text>
        </Document>
        <Document ID="191">
            <Title>RUG_MaterialEditor2</Title>
        </Document>
        <Document ID="280">
            <Title>Untitled</Title>
        </Document>
        <Document ID="236">
            <Title>Adjusting the lights while rendering</Title>
            <Text>LuxRender has a powerful feature that allows you to adjust the brightness and color of light **while** the render is running. To use this feature you need to create light groups. When one or more groups have been defined then you can use the "Light Groups" tab in LuxRender to adjust the brightness, color temperature or tint. 

Reality assigns some lights to pre-defined light groups:

- The Sun is set in its own group called "Sun" and the sky has its own "Sky" group.
- Spotlights are grouped in "Spots"
- [MLs] are grouped in "Mesh Lights"
- Point lights are grouped in "Point Lights"
- [ILs] are grouped in "Misc." 

###Custom light groups
&lt;!-- \index{Light groups} --&gt;
Reality allows us to define our own groups for finer control. In the light editor there is a field where we can type the group name. See figure &lt;!--\ref{light_editor.png}--&gt;. Using the same group name for multiple lights will group them together. If we assign a different group for each light then we will be able to change the light properties, color, brightness and so on, of each light individually. Please remember that this feature can take more memory during rendering so it's best to use the minimum amount of light groups necessary.</Text>
        </Document>
        <Document ID="158">
            <Title>How to re-download Reality</Title>
            <Synopsis>Provide link</Synopsis>
            <Text>You can download Reality at any time by using the **Support** menu of our [website](http://preta3d.com/download-reality/).

If you need to re-download the program you will need your serial number, so make sure to have that information handy.
</Text>
        </Document>
        <Document ID="245">
            <Title>How to use this guide</Title>
            <Text>This guide has several features that are meant to help you find the information needed in the fastest way possible. Since Reality works in the same way, regardless if the version used connects to [PS] or to [DS], there is a single edition of this guide. Whenever a feature is specific to [PS] or [DS], the text will clearly say so. Since several artists use both [PS] and [DS] having all the information about Reality in a single guide is also quite convenient. 

The figure numbers referred to by the text are clickable links that bring you directly to the place where the figure is. The page numbers in the Index are clickable links as well. The page numbers in the Table of Contents are links.
Links to videos are functional and will open the video in your default web browser. All the videos featured in this guide are hosted on YouTube.

Wherever you see a reference to a section like (section XX.YY) that text is an active link that jumps to the relevant page in the book.

User Interface elements are shown in **boldface**.

###The host
The guide describes the features of Reality for both [DS] and [PS], referred to from now on as the plugin's **"hosts."** Wherever this guide uses the word **host** it means either [PS] or [DS].

###The built-in renderers
It's not always a known fact that [PS] and [DS] use an additional component to render their scenes. This is similar to how Reality uses LuxRender to render. So, when we render in [PS] we actually use a program called *Firefly*, which is licensed by [SMI] and integrated into [PS].

When we render in [DS] we actually use a program called 3Delight, developed by DNA Research,  which is licensed by DAZ and integrated into [DS].

In the discussion of what Reality does, we might refer to Firefly or 3Delight to highlight differences of result or workflow. When you see a reference to Firefly it means the rendering system of [PS] and when you see a reference to 3Delight it means the rendering system of [DS].
</Text>
        </Document>
        <Document ID="183">
            <Title>RUG_LuxPath</Title>
        </Document>
        <Document ID="247">
            <Title>Material channels</Title>
            <Text>Materials are made of several "channels," inputs that define some properties of the material. The combination of all the channels produces the final result. The channels have specific names and this section is meant to give a quick overview of the role of each channel.

- **Diffuse.** This channel gives the basic color of a surface. It can be a solid color or an image map or a combination of several elements. The end result is to provide the color, or colors, of the surface. While it's called "Diffuse," the channel has nothing to do with the idea of diffused light. It's simply about the basic appearance of a surface.
- **Specular.** This channel defines the shiny "coat" of a glossy material. The specular channel defines the amount of light that is reflected by the shiny surface of a glossy material and how polished that surface is. 
- **Alpha.** This channel defines the transparency of a material. It can be defined as a single value, for example, the material is 50% transparent, or with a transparency map. Such a map will use black to define portions of the surface that are transparent and white for portions of the surface that are opaque. Shades of grey will define points that are partially transparent, depending on the shade of grey.
- **Bump map.** This channel defines the simulated bumpiness of a surface. It's simulated because bump mapping doesn't move the surface, it simply paints the shading of what bumps and dents would cause to that surface.
- **Displacement map.** This channels defines the displacement of a surface. It works similarly to the bump map but this channels causes actual movement of the surface. To displace the surface the geometry of the material must be very fine. Since this is not always the case, the subdivision parameter is used to subdivide the surface during rendering and obtain smaller polygons that can be easily moved based on the data in the displacement map. &lt;!-- \index{Subdivision} --&gt;
</Text>
        </Document>
        <Document ID="173">
            <Title>RegistrationDialog2</Title>
        </Document>
        <Document ID="22">
            <Title>The Material Editor</Title>
            <Text>The main component of the Reality UI is the material editor. Reality automatically converts all the elements in your scene, like materials, lights and cameras to corresponding elements in LuxRender. For example, a shiny object is converted to the LuxRender *Glossy* material, others are converted to *Matte* and so on. Reality automatically recognizes the materials for most popular figures.  For example, the face material is converted to Skin &lt;!-- \index{Material!Skin} --&gt;and the cornea is converted to a *Glass* material with the Index Of Refraction (IOR) of a human cornea.  Reality also generates Sub-Surface Scattering (SSS) settings for the skin of known models.&lt;!-- \index{SSS} --&gt;

## Editing materials ##

Figure &lt;!--\ref{reality-mat-editor.png}--&gt; shows Reality's Material editor after the plug-in has been invoked on the Victoria 4 model: &lt;!-- \index{Material Editor} --&gt;

# "Material Editor"

The Material list is ordered alphabetically by name. You can reorder the columns to your liking and you can sort by material name, owner, the model that holds the material, and by material type. This kind of organization makes it easy to find materials of the same kind and to operate some transformations on them. 
When you select a material, the lower part of the window shows the properties of that material grouped in several tabs. For example, the *Glossy* material has four tabs:  Material, Alpha Channel, Volumes and Modifiers. &lt;!-- \index{Alpha channel} --&gt;
The Modifiers tab is common for most materials and contains the settings for bump/normal map, displacement map, subdivision and other geometry modification flags. &lt;!-- \index{Subdivision} --&gt;

￼ "The Modifiers tab"

If you don't agree with Reality's choice of material (for example, if you want to change from Glossy to Matte), you can simply select a material, right-click on it, and select a new type from the menu.
</Text>
        </Document>
        <Document ID="264">
            <Title>How to obtain great eye reflections</Title>
            <Text>Like with many other things, if we want to obtain the best results with Reality we need to look at real life. A frequent request is to get nice reflections in the eyes of a character. Reflections come from objects reflected in the cornea of the figure. The cornea is the lens in from of the the iris. If you observe a person near you who shows reflections in the eyes, you will see that the reflection appears on the surface of the cornea.

To replicate the effect with Reality this is how you need to configure the cornea material:

- Make sure that the cornea is set to Architectural Glass with an IOR of 1.4 or 1.5. Most models come already set in this way.
- Make sure that the Tint and Reflection textures are set to be solid color and pure white
- Make sure that there is no Alpha map and that the alpha strength is set to 1.0
- Make sure that there is no Bump map texture

To have reflections in the eyes you need a bright object to be reflected. A mesh light is generally the best solution. Add a mesh light in your scene and make sure that it's positioned quite frontal, in respect to the eye of the subject. 

##Camera position

In real life light reflects at an angle that is equal and opposite to the angle it strikes the surface. This means that if you have a light at 45 degrees to the left of the subject, it will reflect 45 degrees in the right direction. This fact is important to understand how to place your camera. If you camera is in a position to not see the reflected object then you will not get the right result. Most of the time this is not an issue but I have seen scene setups where the camera was placed at extreme angles and the author could not see the effect desired. That is normal and expected. It works in the same way with real people, real light and real cameras. We cannot bend the laws of physics so it's wise to simply work around them. Move the light and the camera until they see each other and you will get the right effect.</Text>
        </Document>
        <Document ID="235">
            <Title>What's new in Reality [version] for [PS]</Title>
            <Text>The following are the biggest new features in Reality [version] compared to the previous one. Many more feature are in the program, ready to be discovered.

- Added support for Genesis, Genesis 2 and all the other DSON-imported models
- Automatic Presets. A large library of material presets that are loaded automatically as an object is added to the scene. Presets can be added by you and shared with other Reality artists. 
- Universal Presets. These are material configurations that can be saved and applied to any material. A library of presets is shipped with Reality. There are presets for emerald, jade, hammered gold, latex, marble, and more.
- The Preset manager allows you to export and import any number of presets with ease
- Material synchronization makes it easy to synchronize a group of materials to a base material. This is a great time saver when editing multiple materials.
- New User Interface look is more efficient and it fits naturally with Poser
- The new Meshlight has an extensible snoot to control the light spill. A "gobo" allows artists to apply patterns to the mesh light for endless light effects.
- New option allows you to create an image map with a single click
- Added strength control for Normal Maps
- Added texture optimization when exporting to LuxRender. Smaller scene files are generated, which load and render faster. 
- Vastly improved and expanded Reality User's Guide (this book).  The Guide also includes a fully interactive Index.
</Text>
        </Document>
        <Document ID="192">
            <Title>RUG_MaterialEditor3</Title>
        </Document>
        <Document ID="256">
            <Title>Light emission</Title>
            <Text>&lt;!-- \index{Light emission} --&gt; &lt;!-- \index{Ambient} --&gt;
Any Reality material, except for Null, can be made to emit light. This option is similar to the Ambient settings of [PS] and [DS]. In fact, Reality will enable this option if it detects that a material in the host has valid Ambient parameters. To determine if a material in the host is actually using the Ambient channel Reality looks at the **Ambient Value** and the **Ambient_Color** parameters. If **Ambient Value** is greater than 0 and Ambient_Color is different from black then the light emission in the Reality material is enabled. 

The Reality Light emission modifier uses the full power of the Reality Texture Editor which gives us flexibility in defining light emission areas within a material. For example, the texture in the Light emission modifier can be used to define LED lights appearing on a surface without the need to actually create a light for each LED.

The **Light gain** value is set to be equal to what is found in the *Ambient_Value* entry in the host. 
The power of the light can be adjusted using the *Light Gain* value. As always, make sure that you use the **Linear Tonemapper** in LuxRender so that you can adjust light groups individually and get the correct result. 

Any light-emitting material will be exported in its own light group, which is named with the prefix *LEM:*--for "Light-Emitting Material"--followed by the name of the material. In this way it's very easy to adjust the brightness of the material while rendering.

Figure &lt;!--\ref{rug_lightemission_demo.png}--&gt; demonstrates the light emission materials in action. The lights on the ceiling, in the arch entrance, and on the instruments displays are all created by just two light emitting materials. The scene has just one Meshlight to add a bit of fill in the darkest areas, most of the illumination is provided by the two light-emitting materials.

# "Light-Emitting materials in action"

&lt;!--\pagebreak[4]--&gt;</Text>
        </Document>
        <Document ID="21">
            <Title>Unbiased vs. biased renderers</Title>
            <Text>LuxRender is a physically-based, unbiased renderer. If you are not familiar with these terms, it's worth spending a few seconds learning how they affect your work. Most rendering engines, including [hrenderer], are biased.

What that means, in simple terms, is that we can drive the renderer to create effects that are not possible in real life. For example, in [hrenderer] we can arbitrarily decide if a light projects shadows and if the shadow is soft or hard. In real life, if we turn on a light, that light will cause shadows. We cannot change that. And if that light is small, in comparison to an object, the shadow will be sharp. If the light is large, like in the case of a big photographer's softbox, the shadows will be soft. This is a law of physics that we can use to your advantage, and these "physically based" behaviors are the basis of "unbiased" renderers like LuxRender.</Text>
        </Document>
        <Document ID="184">
            <Title>RUG_SunAbove</Title>
        </Document>
        <Document ID="273">
            <Title>Material Presets</Title>
            <Text>With Reality we can create material presets to apply to materials in the scene. These presets can change the type of the material, set all the values in a material and set the textures for any channel.</Text>
        </Document>
        <Document ID="159">
            <Title>Gaga_white</Title>
        </Document>
        <Document ID="262">
            <Title>What's new in Reality [version]</Title>
            <Text>**The following are the main changes in Reality [version] compared to 4.2.1:**

- Added per-texture Copy and Paste. Copy a texture, paste it in any channel, even into a different material. This feature works also with Multi-edit.
- Updated Cloth editor to work like the other editors. Clicking on a Color texture shows the color picker.
- It's now possible to remove sub textures, like the one in the Band or Mix texture.
- Added ability to render a subset of an animation.
- For Reality DAZ Studio Edition, added ability to stop animation exporting.
- Updated Lux to version 1.6.
- Added option to cancel the animation export when using DAZ Studio.
- Added icons to the "Render Frame" and "Render Animation" buttons.
- Reality and the Reality installer are all code-signed both for Mac OS and Windows.
- Changed the text color for checkboxes and comboboxes to be white, much easier to read.
- Fixed bug that could cause errors in conversion of materials from Poser. The infamous "could not find float texture" error message in Lux. This improves the conversion of materials for many Poser figures.
- Extended the range for the film thickness in the Mirror material.
- Changed padlock icon with clearer (I hope), link/unlink icon for glossiness values
- Changed icons to have a more modern look and to align better
- Added icons to the top tabs for easy navigation
- Added shortcuts in the Help menu to:
	- Find Automatic Presets
	- Find Reality Freebies
	- Access the Reality forums
	- Access customer support
- Added object aliasing for ACSEL, so that the same preset can be made to work for the same figure whether it's used in DS or Poser.
- Changed Installer to delete previous versions of the files installed and have extensive error reporting in case something doesn't work as expected.
- Changed installer to show different "billboards" while the installation progresses.
- Changed font for the Reality User's Guide, easier to read, looks more modern.

- Fixed bug that caused the export of animation to have some frames out of alignment, in Studio
- Fixed bug that caused bump map to not work with Velvet
- Fixed support for thin film for glass (works only in non-accelerated modes)
- Fixed double "Car paint" category
- Fixed preset selector for light: it allowed to click on the OK button when nothing was selected
- Fixed numerous bugs
- Fixed typo in "Wool Gabardine"
- The number of threads is now not saved in the scene, so that the scene can be moved to another machine and have the 
  number of threads recalculated for the current hardware.


**The following are the main changes in Reality 4.2.1 compared to 4.2.0:**

- Removed the need to enter a scene file name. Now you just specify the image file name and render.
- Changed "Transmission" in the Glass material to use the more descriptive term "Tint."
- Renamed Color Math texture to be the more friendly "Texture Combine."
- The Metal material is automatically set to be shinier than before, providing a better, more natural result.
- When converting a material to Metal, if the original material used an image map Reality enables the "Custom Metal" options automatically.
- Added Start scene for DAZ Studio. This scene gives you a great starting point, with a wide-shot and a portrait camera. Lights are also set for an excellent result out-of-the-box.
- Added Copy and Paste commands to the right-click menu, similarly to Reality 2.x
- New look and feel for the Texture Preview widget. Cleaner and less cluttered.
- Added presets for Pauline, from Poser 11.
- Added option to create a Generic Preset that simply changes the material type, without altering any other property.
- Added support for using TIFF files for IBL.

_Bug fixes_

- Fixed all camera synchronization issues in the DAZ Studio edition.
- Fixed bug that caused cameras saved with Reality 4.0/Studio to not be restored correctly.
- When loading a scene made with Reality 4.0, in Reality 4.1, the export would fail with "there is no light source in the scene." This has been fixed.
- The selected scene sampler is now saved in the scene.
- Texture collection preference is now saved.
- If the topcoat option is used then the selection will be restored when the reloading the scene.
- Fixed bug that caused the text in the Windows  color picker to be unreadable.
- Improved reliability of selection in the light editor.
- Adjusted Poser material conversion to skip Image Map nodes that don't have an actual image.
- Added code to skip the posing controls of Poser 11.
- Fixed bug that prevented using bump mapping with Water.
- Fixed bug that caused Lux to render material as matte (roughness 1.0) when setting the glossiness to 10,000.
- Fixed bug that prevented Automatic Presets be loaded in certain cases.
- Changed startup parameters for Lux to reduce recognizable patterns when using the Sobol sampler.

**The following are the main changes in Reality 4.2 compared to version 4.1.1:**

- Added support for Poser's dynamic hair. Thanks to Eugene Cherepanov for contributing example code. Please note that dynamic hair can be very demanding on the RAM of your machine, resulting in Gigabytes of RAM used.
- Added Support for Poser 11.
- Added start scenes for Poser 11 , 10, and 9.
- Removed requirement to set the exact resolution in Poser in order to render in Reality.
- Optimized certain material conversions.
- The Water Plane now comes in the scene with the correct material and the rippling effect is working as expected.
- Fixed conversion from any material to the Water type. All the rippling parameters now work as expected.
- "Revert to original" now can be applied to multiple materials.
- Improved conversion of the specular/alternate specular channels.
- Fixed bug that prevented objects duplicated in Poser from appearing in Reality.
- Fixed bug that prevented a Poser deleted came from being removed from Reality.
- Fixed bug in loading Posers scenes made with previous versions of Reality.
- Fixed bug that caused exception in Reality when switching to the Setup room in Poser.


**The following are the biggest new features in Reality 4.1 compared to the previous one. The detailed list of what has been changed since the previous version can be found in the Appendix.**

- Up to 20x faster CPU rendering
- GPU+CPU rendering via OpenCL (Windows only)
- Added multi-edit of textures, even across multiple objects. Select multiple materials, edit the Specular color, done. Works across multiple object and with materials of different type, as long as it makes sense.
- Completely integrated LuxRender, no need to install LuxRender separately, everything that you need to render fantastic images is ready "in the box"
- Direct editing of Color and Image Map texture. Click on a color texture and the color picker comes up. Click on a Image Map texture and the file selector comes up. Alt/Opt-Click to open the texture in the texture editor
- Changing material type now works across multiple objects. Select material from as many objects you want, right-click and convert them to any type
- Full support for file merging in the DAZ Studio Edition
- Changed deliverables to use DMG on OS X and Self-Extracting zips for Windows
- Fixed parenting/unparenting issues with Poser
- New Single-light IBL lights, a set of 200 lights developed by Lee Furssedonn ideal for portraits
- Support for iRay shaders with specific smart conversion of the Genesis 3/Victoria 7 materials
- New Universal Presets, including several Car Paint materials
- Customizable Top Coat channel for the Skin material
- Ability to simultaneously use Normal maps and Bump maps in a material
- One-click disabling/enabling of SSS

You can see these features in action in the following video:

[#](https://www.youtube.com/watch?v=aSY-YW1RVj0)
</Text>
        </Document>
        <Document ID="168">
            <Title>Lights are visible</Title>
            <Text>In many 3D applications, [PS] and [DS] included, it is possible to place a light in view of the camera and then set it to be invisible during rendering. This is not possible in LuxRender, and this is a very good thing. 

Hiding lights during rendering is a time-honored technique used by conventional renderers because it was often necessary to use  several lights to simulate ambient light. Those lights needed to be placed in strategic points in the scene and they were often visible by the camera. That trick is not necessary with LuxRender because indirect lighting is always "on" and it doesn't require any additional light.

In aiming for realism we need to think like a photographer, and photographers can't hide the lights from the camera. If we were able to do that, our brain would register that there is something out of place in the image. 

Photographers have learned to hide the lighting fixtures with a variety of tricks of the trade. In aiming to achieve realism we need to do the same.
</Text>
        </Document>
        <Document ID="257">
            <Title>Bump Map/Normal Map</Title>
            <Text>&lt;!-- \index{Bump map} --&gt;  &lt;!-- \index{Normal map} --&gt;
You can load a bump map or a normal map in this part of the UI. Reality will take the bump map from the host, if one is used in the material's shader.  If you use a normal map you will have to notify Reality about this by enabling the Normal Map in the texture editor.

Reality recognizes several standard suffixes for the file name. If the file ends with "NRM", "normal" or "nmap" then the flag will be set automatically. For example, a file named **Face_NRM.png** will be automatically recognized to be a normal map. The uppercase/lowercase mix of letters doesn't matter. When a normal map is used the Bump map the Negative and Positive values are not used. 

Normal maps are used in place of bump maps. Normal maps also provide a much more realistic result and can be an excellent replacement for displacement maps, resulting in renders that take a fraction of the time and the memory to finish, compared to displacement maps. There are several programs, free or inexpensive, that can generate normal maps from the diffuse or bump map. It's definitely worth spending some time getting familiar with this great technique. When using normal maps the Negative and Positive parameters (see below) are disabled because they are not relevant. The Strength parameter remains available for normal maps.

The parameters for controlling the effects of the bump map are:

- Strength.  The overall strength of the bump map. 
- Negative. The maximum distance of the indent (dip) created by the bump map.
- Positive. The maximum distance of the raised portion (bump) of the bump map.</Text>
        </Document>
        <Document ID="193">
            <Title>RUG_MaterialEditor4</Title>
        </Document>
        <Document ID="25">
            <Title>Reality materials are simpler</Title>
            <Text>When you look at the properties of the Reality materials they seem a lot simpler than both the [PS] versions and the [DS] versions. In [PS] you might find a long list of nodes linked together. In [DS] you might find a long list of shader properties spanning several screen lengths.

Reality materials are defined by their characteristics, like being Velvet, Metal or Glass. Those characteristics in many cases include multiple parameters in a traditional renderer that may not be necessary for an unbiased renderer. 

For example, a Glass material needs opacity control in [PS] or [DS], while that is not necessary in Reality since Glass is by definition transparent. **The alpha channel  &lt;!-- \index{Alpha channel} --&gt;for Glass in Reality is only used to create irregular edges or holes in the material.** So, the list of properties in Reality is in many cases different and generally simpler than what you see with a biased renderer. It's also easier to read because it maps properties of real-life materials and it uses simpler terms, whenever possible.

## See before you render: The Material Preview ##

When tweaking and adjusting a material it's nice to be able to see how it will look without having to wait for the whole scene to render. For this task there is the Material Preview.

# "The Material Preview"

&lt;!-- \index{Material preview} --&gt;
Reality works in the background and renders a preview of the material whenever you make a change -- automatically and without blocking our workflow. This is a quick approximation of your material mapped either to a sphere or a plane. The preview is close to the final result but it's not completely accurate, for reasons of speed. It will give you a good understanding of the material's colors, textures, level of glossiness, and so forth. Nevertheless we constantly improve it and for Reality the glass preview is closer to the final result than before. 

When making materials for such important areas of human models like lips, face and eyes, you have a third option for the preview: Shape. Shape gives you a stylized pair of lips, a simplified face and a stylized eye to help you see more precisely the effect of your material. These shapes are all mapped to reflect the real model so that textures project as expected.

Another great feature of the Material Preview is that the previews are persistent: if you select another material and then come back to the original material, the preview will be shown immediately without re-rendering it. The number of previews cached is limited. By default Reality will cache five previews. You can change this number, setting it up to twenty, in the Advanced tab. Reality also automatically detects the Shape preview for certain materials. When previewing the lips or face materials of some figures Reality will automatically select the "Shape" preview. 

## Resetting materials to the original state ##

Sometimes things don't go in the direction that we want. After tweaking a material for a few minutes you might find yourself in a situation where you would rather start again from the beginning, from the original material that was imported by Reality from the host. In this case you can simply right-click on a material and then select **Revert to original** to start from the settings that were used at the beginning of the session.
</Text>
        </Document>
        <Document ID="274">
            <Title>Automatic Preset</Title>
            <Text>Automatic Presets load automatically when an object is added to the scene. This includes figures and props. There is nothing special to do to get these presets to work, Reality will automatically load them if there is a match. While other programs require you to remember and find where the presets might be, with Reality there is no need to do so. The presets are simply applied by Reality.

If there are no presets for a specific object, you can create a new preset and save it. From that moment on Reality will use that preset automatically whenever you add that object to the scene.

Automatic presets work between the [PS] and [DS] editions of Reality. This means, for example, that if you create a preset for a certain skin of Victoria 4, and you used the [PS] edition of Reality, if you switch to [DS] and load the same skin, the preset will load automatically in the [DS] edition of Reality.

This is the first time, in the history of [PS] and [DS], that the exact same materials are applied for both programs, leading to the exact same result.

##Automatic Presets in action

Let's see how an automatic preset works. 

- Let's add Victoria 4 to the scene.
- Call Reality.
- Click on the Materials tab and click on the **Expand All** button.
- In the Preset column you should see the words *V4 basic skin* for materials like 1)SkinFace, 2_SkinTorso. Some other materials have an asterisk in the Preset column.
- Both the "\*" and the *V4 basic skin* values indicate an automatic preset.

# "V4 automatic presets in action"

Let's focus on the **V4 basic skin**. This is called a *specific preset* because it applies to a specific configuration of textures for an object. The shader is applied because the skin definition for the model, V4, has been found in the presets database. As you can see, we didn't have to do anything to load the preset. 

Let's click on the **1_SkinFace** material. Without the preset this material would be of type *Glossy*. The preset changed that to use the material type *Skin*.  The preset also changed the specular color, the values for Glossiness, Fresnel amount, and the gain for the hair mask.

Other V4 presets shipped with Reality include:

- Rio, Lyon and Dublin, by Danae
- Charlie-Neve, by Callad and Moonbunnie
- Lucrezia, by Syyd Raven
- Lana Elite, by DAZ
- Jannika, by Fabiana
- Columbia, by Vikthoria

If you apply one of those skins to V4, the corresponding preset will be loaded automatically. To see the list of all the preset available use the **Presets | Preset Manager** menu. Reality ships with 349 presets and more will be added in the future. 

###How presets are matched
In order work automatically a preset is bound to an object. In other words, if a preset if made for a certain skin for Victoria 4, it will only work with Victoria 4. If you apply the same skin to a Genesis figure, the preset will not be applied unless there is a version of the same preset made for the Genesis figure.

So the first level of automatism involves the specific object. 

Once Reality has found the object it then looks which preset, among all the ones available, match the material configuration from the host. The match is done by looking at the textures included in two channels: Diffuse and Alpha. 

Please note that the match is done on the texture, not just the image map for a channel. So, if the texture used for the Diffuse channel is a complex one, including mixing textures, color math and other elements, then Reality will try to match that combination. A solid color is also a texture so specific presets can be created for objects that has materials in the host that load different colors in the diffuse channel.

###Generic presets
The "\*" that we see in the **Preset** column for some materials indicate a *generic* preset. A generic preset is applied to the material whenever a specific preset is not found. This is  way of creating a series of default values to use. For example, if we apply a skin to Victoria 4 and there is no specific preset, then the generic presets will be applied. 

In the case of V4 the generic preset changes all the skin materials to use the type Skin and is applies certain values that are considered a generic, hence the name, starting point for rendering a good skin. 

**IMPORTANT**

In general, you will not need to create a generic preset, unless you are a creator of content for [PS] or [DS] and the product that you are creating is going to have multiple texture sets. So, for the vast majority of cases, you will be creating specific presets, ones that have the **This is  a generic preset** checkbox **unchecked**.

####Generic presets and textures
A generic preset cannot override a texture except for applying a color to a channel. For example, the cornea of the eye should generally be converted to architectural glass and use pure white for the transmission channel. Every now and then, a skin loads an image map in the diffuse channel of the cornea, in the host's material. That causes the same texture to be used for the transmission channel in Reality, with the result that the cornea renders very dark. By setting the transmission channel with a pure white color we can resolve that issue for all skins.

To create generic preset simply enable the **This is a generic preset** checkbox.
When you set a preset as generic for the first time you will get a message window explaining the function of a generic preset and the request to confirm that you want to continue in that way.

When you need to add a material to an **existing** generic preset you enable the **This is a generic preset** and Reality will automatically retrieve the name and description of the generic preset for the selected object. From there you just click on the **OK** button.

###Creating your own presets

Let's see how easy is to create our own presets. For this tutorial I'll use the *Claw Mirror* free prop that can be found at http://www.vanishingpoint.biz/freeitemdetail.asp?FreeItemID=493

Install the prop in [PS] or [DS] and load it in your scene. Looking at the Reality materials we see that they are all of type Glossy, as expected. We want the frame to be gold and the mirror surface to be, obviously, mirror. By creating an Automatic Preset we need to change those materials only once.

- In Reality, select the Frame material
- Right-click on it and select **To Metal** from the menu
- In the **Metal preset** list select **Gold**
- Type 9200 in the **Horizontal polish**
- You should have the configuration shown in figure &lt;!--\ref{acsel-tut-01.png}--&gt;


￼ "Frame converted to gold"

- Now let's right-click on the material called Mirror
- Select **To Mirror** from the menu
- The mirror tint is set to black because the material for the prop was set I'n that way. This will not work, we need a reflective mirror, not a black one.
- Click on the Mirror tin texture. That will open the Texture Editor.
- In the Texture Editor click on the color and set it to pure white.
- Figure &lt;!--\ref{acsel-tut-02.png}--&gt; shows how the material should appear.

￼

- Add a figure and pose it facing the mirror
- Add a Top Mesh Light
- In Reality click on **Render Frame** in the Render tab
- Verify that the mirror works as expected

At this point we want to make these changes permanent so that, if we re-use the mirror in another scene, we don't have to repeat the above steps.

- Select the Frame material.
- Press Cmd (on a Mac) or Ctrl (on Windows) and then click on the Mirror material. In this way you should have both the Frame and Mirror materials selected.
- Right-click on one of the select materials; it doesn't matter which one. 
- From the menu select **Save as an Automatic preset**. See figure &lt;!--\ref{acsel-tut-03.png}--&gt;
- The window in figure &lt;!--\ref{acsel-tut-04.png}--&gt; will appear.
- Let's write the name of the preset as *Claw mirror*.
- In the description we can write anything that we want.
- Enter whatever name you want to use to credit yourself as the author of this preset. Reality will remember the name and will show it again the next time that you use this feature.
- Click on the OK button and the preset is saved.
- Remove the mirror from the scene.
- Re-add the mirror to the scene and verify that the preset has been loaded automatically. Verify that the materials have been modified as expected.

￼ "Menu option used to save a preset"

￼ "The window used to save a preset"

When an automatic preset is applied to an object, we can continue changing the materials for that object and add more shaders to that preset. 

For example, if we click on the **Back** material for the mirror we can see that it's set as Glossy and that the diffuse color is pure black. Nothing in nature is that black and we want to make that material believable in case we have a scene whee the mirror lies face down on the floor.

- Let's click on the diffuse texture, go to the texture editor and set the color to 236, 201, 143
- Click on the Modifers tab. We see that there is no bump map.
- In the **Bump map** texture slot fin the gear menu, click on it and select **New | Fractal noise**. See figure &lt;!--\ref{acsel-tut-05.png}--&gt;
- Once we do that the fractal noise texture will be loaded in the texture editor.
- Change the values to be:
    - Detail level: 8
    - Roughness 0.7
    - Scale 10%
- See figure &lt;!--\ref{ACSEL-tut-06.png}--&gt; for verification
- Now we have defined the material for the back of the mirror
- Right-click on the Back material, select **Save as an automatic preset**
- The window for the preset information shows again but this time the information is already in there. We just need to click on OK to add the Back material to the preset.
- Delete the mirror from the scene and add it again.
- Verify that the new bump map texture has been added to the Back material automatically.

￼ "Creating a procedural bump map"

￼ "Bump map for the Claw Mirror"

The Automatic Preset help in removing the need to adjust materials for object that are used often in new scenes. Save the preset after you customize the materials for the first time and let Reality apply those settings automatically. You can update or remove your presets at any time.

If you find that a saved material needs to be changed simply re-save the preset. Reality will update the definition in its database. 


&lt;!-- \index{Janet|see{Brad}} --&gt;
&lt;!-- \index{Brad|see{Dr.Scott}} --&gt;
&lt;!-- \index{Dr.Frankenfurter|see{Rocky}} --&gt;
&lt;!-- \index{Dr.Scott|see{Janet}} --&gt;
&lt;!-- \index{Rocky|see{Dr.Frankenfurter}} --&gt;

</Text>
        </Document>
        <Document ID="50">
            <Title>LigthEditor4</Title>
        </Document>
        <Document ID="185">
            <Title>RUG_SunHorizontal</Title>
        </Document>
        <Document ID="227">
            <Title>Light_Editor</Title>
        </Document>
        <Document ID="26">
            <Title>Glossy</Title>
            <Text>&lt;!-- \index{Material!Glossy} --&gt;
One of the most widely used materials, it can be used for things like plastic, glossy paper, semi-glossy stone, leaves, and even human skin.  &lt;!-- \index{Material!Skin} --&gt;

# "The Glossy material"

Glossy has the following channels:

- Diffuse. This channel defines the base color or texture of the material.
- Specular. This channel is usually set to a color or an image map and it defines the amount of light reflected by the material and its color. The brightness of the color determines how much light is reflected. High values of brightness cause the material to reflect more light.  See figure &lt;!--\ref{rug_glossiness.png}--&gt; for an example of how the specular color affects the reflectivity of the material. In the figure the specular color used can be seen in the vertical column of RGB values, for example 50, 50, 50. The row of numbers at the base of the spheres is the level of glossiness used. For best results the brightness should not be set past the midpoint (RGB 127, 127, 127) or it will result in unrealistic results and possible generation of [Fireflies][] or a high amount of render noise that will take longer to resolve. Here are some numbers to guide you in defining the specular color:

	- 0,0,0 reflects no light, which is an unrealistic situation. Even the blackest of materials reflects a little bit of light. 
	- 64, 64, 64 is the equivalent of 25% brightness (255:4 =&gt; 63.75) and that would reflect 25% of the light hitting the glossy coat
	- 127, 127, 127 reflects 50% of the light hitting the glossy coat.
- Glossiness. This channel controls the amount of glossiness, or how shiny a material is. This is the effect of polishing a surface until it's very smooth. Glossiness is expressed as a number, from 0 (dull) to 10,000 (mirror finish). A texture can also be used to control the level of glossiness at any point on the surface. See figure &lt;!--\ref{rug_glossiness.png}--&gt; for an example of how the specular color and the glossiness value work together. The glossiness can be set to have the same value in the horizontal and vertical direction or not. Figure &lt;!--\ref{rug_glossiness-examples.png}--&gt; shows how the variation of horizontal and vertical glossiness affect the specular highlight in comparison to the example where both values are the same. In all three examples the specular color was set to RGB 90, 90, 90 and the lighting was provided by an overhead [ML].
- Top coat. This channel controls the definition of the coat of the material. A Glossy material is basically a Matte material with a shiny coat on top, as if the material has been covered with a coat of varnish. The Coat parameter allows you to control that coat and will result in a "glaze" on top of the material. The color parameter controls the translucent color of the coat. The thickness parameter, by default at 0.3, determines how visible the coat is. Higher values will make the coat more prominent. Please note that the coat is always available when using Glossy, even when the Coat flag in Reality is unselected. The Coat parameters allow us to customize the coat, otherwise LuxRender will use default values.
- Translucency. This channel allows us to make the material translucent. The texture in the channel determines how translucent a material is. Brighter colors cause more translucency.
- Surface Fuzz. This property is used to access the "Asperity" option of LuxRender. It adds a surface scattering of the glossiness. This effect works best with high values of glossiness and can be used to create velvet-like materials. 

￼ "Glossiness and specular color together"

￼ "Variable glossiness values"

</Text>
        </Document>
        <Document ID="169">
            <Title>The Refine Brush tool</Title>
            <Text>When using the non-accelerated rendering mode there can be scenes that have areas that take longer than others to be free of [render noise][Fireflies]. This situation usually happens in parts of the scene where there is low light or where the light's path can be obstructed. For those situations LuxRender has a handy tool: the **Refine Brush**. &lt;!-- \index{Render noise} --&gt; &lt;!-- \index{Refine brush} --&gt;

# "The LuxRender refine brush"

If you want to instruct LuxRender to focus on areas of the image that have higher levels of noise follow these simple steps:

- In LuxRender click on the Refine Brush tab.
- The image that is rendering is shown with a white translucent overlay. You can increase the transparency of that overlay with the Overlay opacity slider. That can help in seeing more clearly some details of the image.
- Paint with your cursor over the areas that have noise. Be conservative in your paint. 
- Click on the Apply button to confirm the application of the refine brush to the painted areas.
- Click on the Imaging tab to go back to the normal rendering page and check the result of the brush.

This procedure will instruct LuxRender to spend more time refining the painted areas instead of equally sampling all pixels in the scene. Once those areas have caught up with the rest of the scene it's a good idea to go back to the Refine Brush tab and click on the Reset button.</Text>
        </Document>
        <Document ID="258">
            <Title>Displacement Map</Title>
            <Text>&lt;!-- \index{Displacement map} --&gt;
The parameters for the displacement map are similar to the ones used for bump mapping, and can be used in conjunction with those. Displacement mapping creates a real alteration of the rendered geometry.  **This parameter depends on the subdivision level**, which has to be increased to 1 or more. Higher values of  subdivision produce finer detail in the resulting geometry but require a much larger amount of memory. This could be an issue with computers running with a limited amount of memory, like the ones using a 32 bit Operating System.
Keep in mind that each level of subdivision, when not using the "microfaceted" option,  **quadruples** the amount of polygons in the mesh (for quadrilateral polygons). The microfaceted option activates a higher-detail type of displacement.
**Please note:** In LuxRender/Reality a displacement map has a Negative and Positive value. The negative value indicates how recessed the geometry should become when the lowest value in the map, pure black, is found. The positive value indicates how raised the surface should be when the highest value in the map, pure white, is found. Therefore, if you don't want to displace the geometry a mid-grey value, 127, 127, 127, needs to be used. If your displacement map has been made for Poser be aware that Poser assumes that black is no displacement. In that case you should set the Negative value to 0.

####Subdivision &lt;!-- \index{Subdivision} --&gt; 
Reality/LuxRender can subdivide the material to make it appear smoother.  Each level of subdivision makes the geometry smoother and smoother but it also increases the amount of polygons that will be computed by LuxRender. Subdivision, when not using the micro facet option, is limited to a maximum of eight levels.

**Keep sharp edges.** This option determines if the subdivision will "round" the edges of the subdivided material or not. This only makes sense when using open figures like floor planes. For human and organic figures this checkbox should be unchecked.

**Use Micro facets.** &lt;!-- \index{Microfacets} --&gt; This option allows you to displace a geometric surface with very high resolution, even when the original geometry is coarse. Enabling this option raises the maximum number of subdivisions from 8 to 500. With this kind of displacement the facets are flat shaded. This means that the displacement is in fact faceted and not smooth. 

Depending on the resolution of the original geometry this might not be an issue. Microfacet displacement is ideal for simulating brick, stone surfaces, metal engraving and so on. As a general guideline, if you need to displace organic shapes, like muscles and veins, do not use the microfacet displacement. If you need to displace walls, floors, weapons etc. then try the microfacet variant. If your base geometry is fairly detailed you can use low values of subdivision. If the geometry is very coarse, like when a floor is defined as a single polygon, then very high values of subdivision, 100, 300 or higher might be used. Be aware that higher values will require more memory and will take longer to render. Be conservative in increasing the subdivision level.</Text>
        </Document>
        <Document ID="283">
            <Title>OpenCL</Title>
            <Text>OpenCL is a technology that allows a program to use the GPU (Graphic Processing Unit, the video card) to execute instructions in parallel. This technology can speed up rendering. To know if you have an OpenCL-enabled GPU please look in the Acceleration page of Render tab of Reality. If OpenCL is available on your machine Reality will report the devices that it found being OpenCL-compatible. 

[osx] has OpenCL support built into the Operating System. Unfortunately the support for OpenCL is broken in [osx] up to version 10.11 (El Capitan). We have petitioned Apple about it but no resolution is in sight at the moment of writing this guide (September 2015).

Please note that OpenCL is not supported on 32-bit versions of Reality. For example, if you use [PS] 9 or 10, not the Pro version, then OpenCL support will not be available. If you need OpenCL support you will need to switch to a 64-bit version of the host program, [PS] or [DS], and install the 64-bit version of Reality.
</Text>
        </Document>
        <Document ID="51">
            <Title>LuxRenderLocation</Title>
        </Document>
        <Document ID="275">
            <Title>Universal Presets</Title>
            <Text>&lt;!-- \index{Universal Presets} --&gt;
In addition to the Automatic Presets Reality allows you to save a give material configuration as a stand-alone preset that can be manually applied to any material. This is called a Universal Preset, because such preset can be applied to any material, regardless of what object was used to create it.

For example, you can use a sphere primitive to create a metallic Universal Preset and then apply it to a sword prop.

To save your Universal Preset simply customize the material and then right-click on it. Select **Save as a Universal preset**. The window in figure &lt;!--\ref{reality-universal-preset.png}--&gt; will appear.

# "The Universal Preset window"

A universal preset needs to be associated to a category, to make it easy to find it later, when needed.
A short name needs to be give to the preset. It's best to use short, descriptive names. For example, the standard bundle of presets of Reality includes a "Hammered gold" preset. That name makes it clear what it is.

In the description field you can add a full description for the preset, including special instructions. To help understand the exact effect of the preset a material preview can be generated. That is done with the **Make preview** button. The quality slider can be used to increase or decrease the quality of the preview. In general it's best to have high quality previews. Reality estimates how long the preview will take, so that you can determine the right balance of time and quality.

When you press **OK** the preset is saved. To use a preset do as follows:

- Select one of more materials
- Right-click on one of the selected materials and select **Apply a Universal Preset**
- Find the preset that you want and confirm. All selected materials will be changed.
</Text>
        </Document>
        <Document ID="27">
            <Title>Matte</Title>
            <Text>&lt;!-- \index{Material!Matte} --&gt;
As the name implies, the Matte material has the purpose of helping define surfaces that have no specularity. Only the Diffuse tab is unique to the Matte material. In it we can find a diffuse color and texture. In addition we can adjust the roughness of this material.

Similar to the Glossy material there is also a translucency channel. It works in exactly the same way.

The "Over-exposure limiter" flag helps in avoiding having the texture for the translucent material being "blown out" when a light is placed behind the translucent object. Also note that we can use the Alpha channel to control the opacity of the translucent material to make it partially transparent and let it pass more light through.  &lt;!-- \index{Alpha channel} --&gt;</Text>
        </Document>
        <Document ID="178">
            <Title>Reality's log file</Title>
            <Text>If something unusual happens while using Reality, and you think that you found a bug you might need to find out what's happening "behind the scenes." 

Reality logs some events into a text file called `Reality_plugin_Log.txt` which is stored in your Documents folder. This file is automatically deleted and re-created once it reaches a size of twelve megabytes.
If you open that file in a text editor you can find possible error messages that can explain if something unexpected happened. If you contact our tech support we might ask you to send a copy of the file to use to help us diagnose the issue.
</Text>
        </Document>
        <Document ID="52">
            <Title>MaterialSnapshot</Title>
        </Document>
    </Documents>
</SearchIndexes>